CCS PCH C Compiler, Version 4.104, 5967               03-feb.-21 07:25

               Filename: D:\Laboratorio\Lampara UV Portatil\2021\Firmware\OLED.lst

               ROM used: 10040 bytes (31%)
                         Largest free fragment is 22724
               RAM used: 1107 (54%) at main() level
                         1162 (57%) worst case
               Stack:    7 worst case (6 in main + 1 for interrupts)

*
0000:  GOTO   1474
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.0
004A:  GOTO   0054
004E:  BTFSC  F9E.0
0050:  GOTO   082E
0054:  MOVFF  0E,00
0058:  MOVFF  0F,01
005C:  MOVFF  10,02
0060:  MOVFF  11,03
0064:  MOVFF  0C,FE9
0068:  MOVFF  07,FEA
006C:  BSF    07.7
006E:  MOVFF  08,FE1
0072:  MOVFF  09,FE2
0076:  MOVFF  0A,FD9
007A:  MOVFF  0B,FDA
007E:  MOVFF  12,FF3
0082:  MOVFF  13,FF4
0086:  MOVFF  14,FFA
008A:  MOVF   04,W
008C:  MOVFF  06,FE0
0090:  MOVFF  05,FD8
0094:  RETFIE 0
.................... /* ====================================================================================================================================================== 
....................  * 
....................  * Copyright JP Bioingenieria SAS, 2021 
....................  * All Rights Reserved 
....................  * BSD license, check license.txt for more information                          * 
....................  * All text above, and the splash screen must be included in any redistribution 
....................  * 
....................  * Sistema de control de encendido y apagado de lu Ultravioleta (UV-C) 
....................  * Tres modos de funcionamiento: Modo Push, Modo Hold y modo Timer 
....................  * En el modo Push se debe mantener oprimido el boton para encender la luz, una vez se suelte la luz se apaga. 
....................  * En el modo Hold, la luz cambia de estado cada vez que se presione el boton. 
....................  * En el modo Timer, se configura el temporizador oprimiendo la tecla arriba durante mas de 2 segundos. La luz se enciende durante el tiempo programado. 
....................  * El sistema utiliza un display OLED I2C SH1106 de 128x64 pixeles. 
....................  * ====================================================================================================================================================== 
.................... */ 
.................... #include <18F2550.h> 
.................... //////// Standard Header file for the PIC18F2550 device //////////////// 
.................... #device PIC18F2550 
.................... #list 
....................  
.................... #fuses HSPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,NOSTVREN,NOPUT,NOCPD,NOWRT,NOIESO,NOFCMEN,NOPBADEN,NOWRTC,NOWRTB,NOEBTR,NOEBTRB,NOCPB,NOXINST,NOBROWNOUT,NOLPT1OSC,NOMCLR,NOUSBDIV,NOVREGEN,PLL5 
.................... #use delay(clock=20000000) 
*
08F0:  MOVLW  04
08F2:  MOVWF  FEA
08F4:  MOVLW  52
08F6:  MOVWF  FE9
08F8:  MOVF   FEF,W
08FA:  BZ    0916
08FC:  MOVLW  06
08FE:  MOVWF  01
0900:  CLRF   00
0902:  DECFSZ 00,F
0904:  BRA    0902
0906:  DECFSZ 01,F
0908:  BRA    0900
090A:  MOVLW  7B
090C:  MOVWF  00
090E:  DECFSZ 00,F
0910:  BRA    090E
0912:  DECFSZ FEF,F
0914:  BRA    08FC
0916:  RETLW  00
.................... #use I2C(MASTER,FAST,sda=PIN_C1, scl=PIN_C0, stream = SSD1306_STREAM) 
0918:  MOVLW  08
091A:  MOVWF  01
091C:  NOP   
091E:  BCF    F8B.0
0920:  BCF    F94.0
0922:  NOP   
0924:  MOVLB  4
0926:  RLCF   x5E,F
0928:  BCF    F8B.1
092A:  BTFSC  FD8.0
092C:  BSF    F94.1
092E:  BTFSS  FD8.0
0930:  BCF    F94.1
0932:  BSF    F94.0
0934:  BTFSS  F82.0
0936:  BRA    0934
0938:  DECFSZ 01,F
093A:  BRA    093E
093C:  BRA    0942
093E:  MOVLB  0
0940:  BRA    091C
0942:  NOP   
0944:  BCF    F8B.0
0946:  BCF    F94.0
0948:  NOP   
094A:  BSF    F94.1
094C:  NOP   
094E:  NOP   
0950:  BSF    F94.0
0952:  BTFSS  F82.0
0954:  BRA    0952
0956:  CLRF   01
0958:  NOP   
095A:  BTFSC  F82.1
095C:  BSF    01.0
095E:  BCF    F8B.0
0960:  BCF    F94.0
0962:  BCF    F8B.1
0964:  BCF    F94.1
0966:  MOVLB  0
0968:  RETLW  00
.................... //#use I2C(MASTER,FAST,sda=PIN_B0, scl=PIN_B1, stream = SSD1306_STREAM) 
....................  
.................... #define ON  1 
.................... #define OFF 0 
.................... #define SSD1306_128_64 
.................... #include "imagenes.h" 
.................... const char logo[64][16] = { 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xEF, 0xFF, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xEF, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xC0, 0x00, 0x00, 0x07, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xC0, 0x00, 0x00, 0x07, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xC0, 0x00, 0x00, 0x07, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x80, 0x00, 0x00, 0x07, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x80, 0x00, 0x00, 0x07, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x0F, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x0F, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x1F, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x3F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x0E, 0xFF, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x0E, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x1C, 0x00, 0x00, 0x01, 0x80, 0x03, 0x80, 0x00, 0x03, 0x80, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x1C, 0x00, 0x00, 0x03, 0x80, 0x03, 0x80, 0x00, 0x07, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x3B, 0xFF, 0x9F, 0xFB, 0xBF, 0xF7, 0xFF, 0x3F, 0xE7, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x3B, 0xFF, 0xBF, 0xFB, 0x7F, 0xF7, 0xFF, 0x3F, 0xF7, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x3B, 0x87, 0xF0, 0x77, 0x70, 0x77, 0x07, 0x00, 0x76, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x37, 0x07, 0x70, 0x77, 0x70, 0x76, 0x06, 0x7F, 0xEE, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x77, 0x07, 0x70, 0x76, 0xE0, 0xEE, 0x0E, 0xFF, 0xEE, 0x00, 
.................... 0x01, 0xFF, 0xFF, 0x00, 0x01, 0xF0, 0x77, 0x07, 0x60, 0x6E, 0xE0, 0xEE, 0x0E, 0xE0, 0xEC, 0x00, 
.................... 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x6E, 0x0E, 0xFF, 0xEE, 0xFF, 0xEF, 0xFD, 0xFF, 0xDC, 0x00, 
.................... 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0xEE, 0x0E, 0xFF, 0xEE, 0xFF, 0xDF, 0xFC, 0xFF, 0xDC, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
.................... }; 
....................  
.................... const char bombillo[64][16] = { 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x03, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xC0, 0x00, 0x00, 
.................... 0x00, 0x00, 0x01, 0xFC, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x7F, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0xFE, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x1F, 0xC0, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x03, 0xF8, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x07, 0xC0, 0x1F, 0xFE, 0x00, 0x00, 0x7F, 0xF8, 0x03, 0xE0, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x80, 0x00, 0x00, 0x01, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x03, 0xFC, 0x00, 0x03, 0xFC, 0x00, 0x3F, 0xC0, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x0F, 0xE0, 0x00, 0x07, 0xFF, 0xF0, 0x07, 0xF0, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x01, 0xFF, 0xFF, 0x01, 0xFC, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xC0, 0x7F, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x01, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x07, 0xF0, 0x1F, 0x80, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x03, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFC, 0x0F, 0xC0, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x07, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x07, 0xE0, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x0F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x83, 0xF0, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x0F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xC1, 0xF0, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xE0, 0xF8, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xE0, 0xF8, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xE0, 0x7C, 0x00, 0x00, 0x00, 
.................... 0x01, 0xFF, 0xF0, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xF0, 0x7C, 0x0F, 0xFF, 0x80, 
.................... 0x03, 0xFF, 0xF8, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xF0, 0x7C, 0x1F, 0xFF, 0xC0, 
.................... 0x00, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x1F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xF8, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x0F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xF0, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x07, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xE0, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x03, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xC0, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x01, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x80, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x1F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x03, 0xF8, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x07, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xE0, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x01, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x80, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x03, 0x80, 0x7F, 0xE0, 0x00, 0x00, 0x07, 0xFE, 0x01, 0xC0, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x0F, 0xC0, 0x07, 0xE0, 0x00, 0x00, 0x07, 0xE0, 0x03, 0xF0, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x3F, 0x80, 0x03, 0xE0, 0x00, 0x00, 0x07, 0xC0, 0x01, 0xFC, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0xFE, 0x00, 0x03, 0xE0, 0x00, 0x00, 0x07, 0xC0, 0x00, 0x7F, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x03, 0xF8, 0x00, 0x03, 0xE0, 0x00, 0x00, 0x07, 0xC0, 0x00, 0x1F, 0xC0, 0x00, 0x00, 
.................... 0x00, 0x00, 0x01, 0xE0, 0x00, 0x03, 0xE0, 0x00, 0x00, 0x07, 0xC0, 0x00, 0x07, 0x80, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
.................... }; 
....................  
....................  
....................  
.................... #include "SSD1306OLED.c" 
.................... /****************************************************************************** 
....................  SSD1306 OLED driver for CCS PIC C compiler (SSD1306OLED.c)                   * 
....................  Reference: Adafruit Industries SSD1306 OLED driver and graphics library.     * 
....................                                                                               * 
....................  The driver is for I2C mode only.                                             * 
....................                                                                               * 
....................  https://simple-circuit.com/                                                   * 
....................                                                                               * 
.................... ******************************************************************************* 
.................... ******************************************************************************* 
....................  This is a library for our Monochrome OLEDs based on SSD1306 drivers          * 
....................                                                                               * 
....................   Pick one up today in the adafruit shop!                                     * 
....................   ------> http://www.adafruit.com/category/63_98                              * 
....................                                                                               * 
....................  Adafruit invests time and resources providing this open source code,         * 
....................  please support Adafruit and open-source hardware by purchasing               * 
....................  products from Adafruit!                                                      * 
....................                                                                               * 
....................  Written by Limor Fried/Ladyada  for Adafruit Industries.                     * 
....................  BSD license, check license.txt for more information                          * 
....................  All text above, and the splash screen must be included in any redistribution * 
.................... *******************************************************************************/ 
....................  
....................  
....................  
.................... #include <stdint.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... ////                           stdint.h                                //// 
.................... ////                                                                   //// 
.................... //// Standard integer definitions.                                     //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDINT 
....................  
.................... #define _STDINT 
....................  
.................... //////////// exact width 
....................  
.................... typedef signed int8 int8_t; 
.................... typedef unsigned int8 uint8_t; 
.................... typedef signed int16 int16_t; 
.................... typedef unsigned int16 uint16_t; 
.................... typedef signed int32 int32_t; 
.................... typedef unsigned int32 uint32_t; 
....................  
.................... #if defined(__PCD__) 
.................... //typedef signed int24 int24_t; 
.................... //typedef unsigned int24 uint24_t; 
.................... typedef signed int64 int64_t; 
.................... typedef unsigned int64 uint64_t; 
.................... #endif 
....................  
.................... #define INT8_MAX  (128) 
.................... #define INT8_MIN  (-127) 
.................... #define UINT8_MAX (255) 
....................  
.................... #define INT16_MAX  (32767) 
.................... #define INT16_MIN  (-32768) 
.................... #define UINT16_MAX (65535) 
....................  
.................... #define INT32_MAX  (2147483647) 
.................... #define INT32_MIN  (-2147483648) 
.................... #define UINT32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT24_MAX  (8388607) 
.................... //#define INT24_MIN  (-8388608) 
.................... //#define UINT24_MAX (16777215) 
....................  
.................... #define INT64_MAX  (9223372036854775807) 
.................... #define INT64_MIN  (-9223372036854775808) 
.................... #define UINT64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... ///////// minimum width 
....................  
.................... typedef signed int8 int_least8_t; 
.................... typedef unsigned int8 uint_least8_t; 
.................... typedef signed int16 int_least16_t; 
.................... typedef unsigned int16 uint_least16_t; 
.................... typedef signed int32 int_least32_t; 
.................... typedef unsigned int32 uint_least32_t; 
....................  
.................... #if defined(__PCD__) 
.................... //typedef signed int24 int_least24_t; 
.................... //typedef unsigned int24 uint_least24_t; 
.................... typedef signed int64 int_least64_t; 
.................... typedef unsigned int64 uint_least64_t; 
.................... #endif 
....................  
.................... #define INT_LEAST8_MAX  (128) 
.................... #define INT_LEAST8_MIN  (-127) 
.................... #define UINT_LEAST8_MAX (255) 
....................  
.................... #define INT_LEAST16_MAX  (32767) 
.................... #define INT_LEAST16_MIN  (-32768) 
.................... #define UINT_LEAST16_MAX (65535) 
....................  
.................... #define INT_LEAST32_MAX  (2147483647) 
.................... #define INT_LEAST32_MIN  (-2147483648) 
.................... #define UINT_LEAST32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT_LEAST24_MAX  (8388607) 
.................... //#define INT_LEAST24_MIN  (-8388608) 
.................... //#define UINT_LEAST24_MAX (16777215) 
....................  
.................... #define INT_LEAST64_MAX  (9223372036854775807) 
.................... #define INT_LEAST64_MIN  (-9223372036854775808) 
.................... #define UINT_LEAST64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... ///////// fastest width 
....................  
.................... #if defined(__PCD__) 
.................... typedef signed int16 int_fast8_t; 
.................... typedef unsigned int16 uint_fast8_t; 
.................... #define INT_FAST8_MAX  (32767) 
.................... #define INT_FAST8_MIN  (-32768) 
.................... #define UINT_FAST8_MAX (65535) 
.................... typedef signed int16 int_fast16_t; 
.................... typedef unsigned int16 uint_fast16_t; 
.................... //typedef signed int24 int_fast24_t; 
.................... //typedef unsigned int24 uint_fast24_t; 
.................... typedef signed int64 int_fast64_t; 
.................... typedef unsigned int64 uint_fast64_t; 
.................... #else 
.................... typedef signed int8 int_fast8_t; 
.................... typedef unsigned int8 uint_fast8_t; 
.................... #define INT_FAST8_MAX  (128) 
.................... #define INT_FAST8_MIN  (-127) 
.................... #define UINT_FAST8_MAX (255) 
.................... typedef signed int16 int_fast16_t; 
.................... typedef unsigned int16 uint_fast16_t; 
.................... #endif 
....................  
.................... typedef signed int32 int_fast32_t; 
.................... typedef unsigned int32 uint_fast32_t; 
....................  
.................... #define INT_FAST16_MAX  (32767) 
.................... #define INT_FAST16_MIN  (-32768) 
.................... #define UINT_FAST16_MAX (65535) 
....................  
.................... #define INT_FAST32_MAX  (2147483647) 
.................... #define INT_FAST32_MIN  (-2147483648) 
.................... #define UINT_FAST32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT_FAST24_MAX  (8388607) 
.................... //#define INT_FAST24_MIN  (-8388608) 
.................... //#define UINT_FAST24_MAX (16777215) 
....................  
.................... #define INT_FAST64_MAX  (9223372036854775807) 
.................... #define INT_FAST64_MIN  (-9223372036854775808) 
.................... #define UINT_FAST64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... //////////// big enough to hold pointers (OPTIONAL) 
....................  
.................... /// TODO 
....................  
.................... /// intptr_t uintptr_t 
....................  
.................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
....................  
....................  
.................... /////////// greatest width (OPTIONAL) 
....................  
.................... /// TODO 
....................  
.................... /// intmax_t uintmax_t 
....................  
.................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
....................  
.................... /// INTMAX_C(value) UINTMAX_C(value) 
....................  
....................  
.................... #endif 
....................  
....................  
.................... //------------------------------ Definitions ---------------------------------// 
....................  
.................... #ifndef SSD1306_I2C_ADDRESS 
....................   #define SSD1306_I2C_ADDRESS   0x78 
....................  
.................... #if !defined SSD1306_128_32 && !defined SSD1306_96_16 
.................... #define SSD1306_128_64 
.................... #endif 
.................... #if defined SSD1306_128_32 && defined SSD1306_96_16 
....................   #error "Only one SSD1306 display can be specified at once" 
.................... #endif 
....................  
.................... #if defined SSD1306_128_64 
....................   #define SSD1306_LCDWIDTH           128 
....................   #define SSD1306_LCDHEIGHT           64 
.................... #endif 
.................... #if defined SSD1306_128_32 
....................   #define SSD1306_LCDWIDTH            128 
....................   #define SSD1306_LCDHEIGHT            32 
.................... #endif 
.................... #if defined SSD1306_96_16 
....................   #define SSD1306_LCDWIDTH             96 
....................   #define SSD1306_LCDHEIGHT            16 
.................... #endif 
....................  
.................... #define SSD1306_SETCONTRAST          0x81 
.................... #define SSD1306_DISPLAYALLON_RESUME  0xA4 
.................... #define SSD1306_DISPLAYALLON         0xA5 
.................... #define SSD1306_NORMALDISPLAY        0xA6 
.................... #define SSD1306_INVERTDISPLAY_       0xA7 
.................... #define SSD1306_DISPLAYOFF           0xAE 
.................... #define SSD1306_DISPLAYON            0xAF 
.................... #define SSD1306_SETDISPLAYOFFSET     0xD3 
.................... #define SSD1306_SETCOMPINS           0xDA 
.................... #define SSD1306_SETVCOMDETECT        0xDB 
.................... #define SSD1306_SETDISPLAYCLOCKDIV   0xD5 
.................... #define SSD1306_SETPRECHARGE         0xD9 
.................... #define SSD1306_SETMULTIPLEX         0xA8 
.................... #define SSD1306_SETLOWCOLUMN         0x00 
.................... #define SSD1306_SETHIGHCOLUMN        0x10 
.................... #define SSD1306_SETSTARTLINE         0x40 
.................... #define SSD1306_MEMORYMODE           0x20 
.................... #define SSD1306_COLUMNADDR           0x21 
.................... #define SSD1306_PAGEADDR             0x22 
.................... #define SSD1306_COMSCANINC           0xC0 
.................... #define SSD1306_COMSCANDEC           0xC8 
.................... #define SSD1306_SEGREMAP             0xA0 
.................... #define SSD1306_CHARGEPUMP           0x8D 
.................... #define SSD1306_EXTERNALVCC          0x01 
.................... #define SSD1306_SWITCHCAPVCC         0x02 
.................... #define DAT                          0x60 
....................  
.................... // Scrolling #defines 
.................... #define SSD1306_ACTIVATE_SCROLL                      0x2F 
.................... #define SSD1306_DEACTIVATE_SCROLL                    0x2E 
.................... #define SSD1306_SET_VERTICAL_SCROLL_AREA             0xA3 
.................... #define SSD1306_RIGHT_HORIZONTAL_SCROLL              0x26 
.................... #define SSD1306_LEFT_HORIZONTAL_SCROLL               0x27 
.................... #define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29 
.................... #define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL  0x2A 
....................  
.................... #define ssd1306_swap(a, b) { int16 t = a; a = b; b = t; } 
....................  
.................... int8 _i2caddr, _vccstate, x_pos, y_pos, text_size; 
.................... int1 wrap = TRUE; 
....................  
.................... void ssd1306_command(int8 c); 
.................... void SSD1306_Begin(int8 vccstate = SSD1306_SWITCHCAPVCC, int8 i2caddr = SSD1306_I2C_ADDRESS); 
.................... void SSD1306_DrawPixel(int16 x, int16 y, int1 color = TRUE); 
.................... void SSD1306_StartScrollRight(int8 start, int8 stop); 
.................... void SSD1306_StartScrollLeft(int8 start, int8 stop); 
.................... void SSD1306_StartScrollDiagRight(int8 start, int8 stop); 
.................... void SSD1306_StartScrollDiagLeft(int8 start, int8 stop); 
.................... void SSD1306_StopScroll(void); 
.................... void SSD1306_Dim(int1 dim); 
.................... void SSD1306_Display(void); 
.................... void SSD1306_ClearDisplay(void); 
.................... void SSD1306_DrawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int1 color = TRUE); 
.................... void SSD1306_DrawFastHLine(uint8_t x, uint8_t y, uint8_t w, int1 color = TRUE); 
.................... void SSD1306_DrawFastVLine(uint8_t x, uint8_t y, uint8_t h, int1 color = TRUE); 
.................... void SSD1306_FillRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, int1 color = TRUE); 
.................... void SSD1306_FillScreen(int1 color = TRUE); 
.................... void SSD1306_DrawCircle(int16_t x0, int16_t y0, int16_t r); 
.................... void SSD1306_DrawCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername); 
.................... void SSD1306_FillCircle(int16_t x0, int16_t y0, int16_t r, int1 color = TRUE); 
.................... void SSD1306_FillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, int1 color = TRUE); 
.................... void SSD1306_DrawRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h); 
.................... void SSD1306_DrawRoundRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t r); 
.................... void SSD1306_FillRoundRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t r, int1 color = TRUE); 
.................... void SSD1306_DrawTriangle(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2); 
.................... void SSD1306_FillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, int1 color = TRUE); 
.................... void SSD1306_DrawChar(uint8_t x, uint8_t y, uint8_t c, uint8_t size = 1); 
.................... void SSD1306_DrawText(uint8_t x, uint8_t y, char *_text, uint8_t size = 1); 
.................... void SSD1306_TextSize(uint8_t t_size); 
.................... void SSD1306_GotoXY(uint8_t x, uint8_t y); 
.................... void SSD1306_Print(uint8_t c); 
.................... void SSD1306_PutCustomC(rom uint8_t *c); 
.................... void SSD1306_SetTextWrap(int1 w); 
.................... void SSD1306_InvertDisplay(int1 i); 
.................... void SSD1306_DrawBMP(uint8_t x, uint8_t y, rom uint8_t *bitmap, uint8_t w, uint8_t h); 
....................  
.................... //--------------------------------------------------------------------------// 
....................  
.................... const char Font[] = { 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x5F, 0x00, 0x00, 
.................... 0x00, 0x07, 0x00, 0x07, 0x00, 
.................... 0x14, 0x7F, 0x14, 0x7F, 0x14, 
.................... 0x24, 0x2A, 0x7F, 0x2A, 0x12, 
.................... 0x23, 0x13, 0x08, 0x64, 0x62, 
.................... 0x36, 0x49, 0x56, 0x20, 0x50, 
.................... 0x00, 0x08, 0x07, 0x03, 0x00, 
.................... 0x00, 0x1C, 0x22, 0x41, 0x00, 
.................... 0x00, 0x41, 0x22, 0x1C, 0x00, 
.................... 0x2A, 0x1C, 0x7F, 0x1C, 0x2A, 
.................... 0x08, 0x08, 0x3E, 0x08, 0x08, 
.................... 0x00, 0x80, 0x70, 0x30, 0x00, 
.................... 0x08, 0x08, 0x08, 0x08, 0x08, 
.................... 0x00, 0x00, 0x60, 0x60, 0x00, 
.................... 0x20, 0x10, 0x08, 0x04, 0x02, 
.................... 0x3E, 0x51, 0x49, 0x45, 0x3E, 
.................... 0x00, 0x42, 0x7F, 0x40, 0x00, 
.................... 0x72, 0x49, 0x49, 0x49, 0x46, 
.................... 0x21, 0x41, 0x49, 0x4D, 0x33, 
.................... 0x18, 0x14, 0x12, 0x7F, 0x10, 
.................... 0x27, 0x45, 0x45, 0x45, 0x39, 
.................... 0x3C, 0x4A, 0x49, 0x49, 0x31, 
.................... 0x41, 0x21, 0x11, 0x09, 0x07, 
.................... 0x36, 0x49, 0x49, 0x49, 0x36, 
.................... 0x46, 0x49, 0x49, 0x29, 0x1E, 
.................... 0x00, 0x00, 0x14, 0x00, 0x00, 
.................... 0x00, 0x40, 0x34, 0x00, 0x00, 
.................... 0x00, 0x08, 0x14, 0x22, 0x41, 
.................... 0x14, 0x14, 0x14, 0x14, 0x14, 
.................... 0x00, 0x41, 0x22, 0x14, 0x08, 
.................... 0x02, 0x01, 0x59, 0x09, 0x06, 
.................... 0x3E, 0x41, 0x5D, 0x59, 0x4E, 
.................... 0x7C, 0x12, 0x11, 0x12, 0x7C, 
.................... 0x7F, 0x49, 0x49, 0x49, 0x36, 
.................... 0x3E, 0x41, 0x41, 0x41, 0x22, 
.................... 0x7F, 0x41, 0x41, 0x41, 0x3E, 
.................... 0x7F, 0x49, 0x49, 0x49, 0x41, 
.................... 0x7F, 0x09, 0x09, 0x09, 0x01, 
.................... 0x3E, 0x41, 0x41, 0x51, 0x73, 
.................... 0x7F, 0x08, 0x08, 0x08, 0x7F, 
.................... 0x00, 0x41, 0x7F, 0x41, 0x00, 
.................... 0x20, 0x40, 0x41, 0x3F, 0x01, 
.................... 0x7F, 0x08, 0x14, 0x22, 0x41, 
.................... 0x7F, 0x40, 0x40, 0x40, 0x40, 
.................... 0x7F, 0x02, 0x1C, 0x02, 0x7F, 
.................... 0x7F, 0x04, 0x08, 0x10, 0x7F, 
.................... 0x3E, 0x41, 0x41, 0x41, 0x3E, 
.................... 0x7F, 0x09, 0x09, 0x09, 0x06, 
.................... 0x3E, 0x41, 0x51, 0x21, 0x5E, 
.................... 0x7F, 0x09, 0x19, 0x29, 0x46 
.................... }; 
.................... const char Font2[] = { 
.................... 0x26, 0x49, 0x49, 0x49, 0x32, 
.................... 0x03, 0x01, 0x7F, 0x01, 0x03, 
.................... 0x3F, 0x40, 0x40, 0x40, 0x3F, 
.................... 0x1F, 0x20, 0x40, 0x20, 0x1F, 
.................... 0x3F, 0x40, 0x38, 0x40, 0x3F, 
.................... 0x63, 0x14, 0x08, 0x14, 0x63, 
.................... 0x03, 0x04, 0x78, 0x04, 0x03, 
.................... 0x61, 0x59, 0x49, 0x4D, 0x43, 
.................... 0x00, 0x7F, 0x41, 0x41, 0x41, 
.................... 0x02, 0x04, 0x08, 0x10, 0x20, 
.................... 0x00, 0x41, 0x41, 0x41, 0x7F, 
.................... 0x04, 0x02, 0x01, 0x02, 0x04, 
.................... 0x40, 0x40, 0x40, 0x40, 0x40, 
.................... 0x00, 0x03, 0x07, 0x08, 0x00, 
.................... 0x20, 0x54, 0x54, 0x78, 0x40, 
.................... 0x7F, 0x28, 0x44, 0x44, 0x38, 
.................... 0x38, 0x44, 0x44, 0x44, 0x28, 
.................... 0x38, 0x44, 0x44, 0x28, 0x7F, 
.................... 0x38, 0x54, 0x54, 0x54, 0x18, 
.................... 0x00, 0x08, 0x7E, 0x09, 0x02, 
.................... 0x18, 0xA4, 0xA4, 0x9C, 0x78, 
.................... 0x7F, 0x08, 0x04, 0x04, 0x78, 
.................... 0x00, 0x44, 0x7D, 0x40, 0x00, 
.................... 0x20, 0x40, 0x40, 0x3D, 0x00, 
.................... 0x7F, 0x10, 0x28, 0x44, 0x00, 
.................... 0x00, 0x41, 0x7F, 0x40, 0x00, 
.................... 0x7C, 0x04, 0x78, 0x04, 0x78, 
.................... 0x7C, 0x08, 0x04, 0x04, 0x78, 
.................... 0x38, 0x44, 0x44, 0x44, 0x38, 
.................... 0xFC, 0x18, 0x24, 0x24, 0x18, 
.................... 0x18, 0x24, 0x24, 0x18, 0xFC, 
.................... 0x7C, 0x08, 0x04, 0x04, 0x08, 
.................... 0x48, 0x54, 0x54, 0x54, 0x24, 
.................... 0x04, 0x04, 0x3F, 0x44, 0x24, 
.................... 0x3C, 0x40, 0x40, 0x20, 0x7C, 
.................... 0x1C, 0x20, 0x40, 0x20, 0x1C, 
.................... 0x3C, 0x40, 0x30, 0x40, 0x3C, 
.................... 0x44, 0x28, 0x10, 0x28, 0x44, 
.................... 0x4C, 0x90, 0x90, 0x90, 0x7C, 
.................... 0x44, 0x64, 0x54, 0x4C, 0x44, 
.................... 0x00, 0x08, 0x36, 0x41, 0x00, 
.................... 0x00, 0x00, 0x77, 0x00, 0x00, 
.................... 0x00, 0x41, 0x36, 0x08, 0x00, 
.................... 0x02, 0x01, 0x02, 0x04, 0x02 
.................... }; 
....................  
.................... static int8 ssd1306_buffer[SSD1306_LCDHEIGHT * SSD1306_LCDWIDTH / 8]  = { 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xE0, 0xE0, 0xE0, 
.................... 0xE0, 0xE0, 0x60, 0x00, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 
.................... 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0xE0, 0xE0, 0xE0, 
.................... 0xE0, 0xE0, 0xE0, 0xC0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
.................... 0x3F, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xF0, 0xFF, 0xFF, 0xFF, 
.................... 0xFF, 0xFF, 0x7F, 0x0F, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0xFF, 0xFF, 0xFF, 0x7F, 0x0F, 0x01, 
.................... 0x00, 0x00, 0xE0, 0xF8, 0xFB, 0x1B, 0xE3, 0xE0, 0xE3, 0x63, 0x63, 0x63, 0x63, 0xE3, 0xE3, 0xE3, 
.................... 0xE3, 0x83, 0xC3, 0xE3, 0x63, 0x63, 0x63, 0x63, 0x63, 0xE3, 0xE3, 0xE3, 0x63, 0x83, 0xF3, 0xFB, 
.................... 0x39, 0xC1, 0xE0, 0xE0, 0x60, 0x60, 0x60, 0x60, 0x60, 0xE0, 0xE0, 0xE0, 0x00, 0xE0, 0xF8, 0xF8, 
.................... 0x78, 0x60, 0x60, 0x60, 0x60, 0xE0, 0xE0, 0xE0, 0x00, 0x00, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 
.................... 0x60, 0xE0, 0xE0, 0xC0, 0x00, 0xF0, 0xF8, 0x78, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 
.................... 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 
.................... 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1C, 0x1F, 0x1F, 0x1F, 0x0F, 0x03, 0x00, 0x00, 0x00, 
.................... 0x10, 0x1E, 0x1F, 0x07, 0x18, 0x1F, 0x1F, 0x07, 0x00, 0x00, 0x00, 0x00, 0x18, 0x1F, 0x1F, 0x07, 
.................... 0x18, 0x1F, 0x1F, 0x1B, 0x18, 0x18, 0x98, 0xF8, 0xF8, 0x7F, 0x1F, 0x03, 0x1C, 0x1F, 0x1F, 0x01, 
.................... 0x1E, 0x1F, 0x1F, 0x19, 0x18, 0x18, 0x18, 0x18, 0x1E, 0x1F, 0x0F, 0x11, 0x1E, 0x1F, 0x1F, 0x18, 
.................... 0x18, 0x18, 0x18, 0x18, 0x1E, 0x1F, 0x07, 0x08, 0x1E, 0x1F, 0x1F, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 
.................... 0x1F, 0x1F, 0x07, 0x18, 0x1F, 0x1F, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
.................... }; 
....................  
.................... void ssd1306_command(int8 c) 
.................... { 
096A:  MOVLB  4
096C:  CLRF   x5D
....................     uint8_t control = 0x00;   // Co = 0, D/C = 0 
....................     i2c_Start(SSD1306_STREAM); 
096E:  BSF    F94.1
0970:  NOP   
0972:  BSF    F94.0
0974:  NOP   
0976:  BCF    F8B.1
0978:  BCF    F94.1
097A:  NOP   
097C:  BCF    F8B.0
097E:  BCF    F94.0
....................     i2c_Write(SSD1306_STREAM, _i2caddr); 
0980:  MOVFF  16,45E
0984:  MOVLB  0
0986:  RCALL  0918
....................     i2c_Write(SSD1306_STREAM, control); 
0988:  MOVFF  45D,45E
098C:  RCALL  0918
....................     i2c_Write(SSD1306_STREAM, c); 
098E:  MOVFF  45C,45E
0992:  RCALL  0918
....................     i2c_Stop(SSD1306_STREAM); 
0994:  BCF    F94.1
0996:  NOP   
0998:  BSF    F94.0
099A:  BTFSS  F82.0
099C:  BRA    099A
099E:  NOP   
09A0:  BRA    09A2
09A2:  NOP   
09A4:  BSF    F94.1
09A6:  NOP   
.................... } 
09A8:  RETLW  00
....................  
.................... void SSD1306_Begin(int8 vccstate = SSD1306_SWITCHCAPVCC, int8 i2caddr = SSD1306_I2C_ADDRESS) 
.................... { 
....................   _vccstate = vccstate; 
09AA:  MOVFF  451,17
....................   _i2caddr = i2caddr; 
09AE:  MOVFF  452,16
....................  
....................     // I2C Init 
....................  
....................    #if defined SSD1306_128_32 
....................     // Init sequence for 128x32 OLED module 
....................     SSD1306_command(SSD1306_DISPLAYOFF);                    // 0xAE 
....................     SSD1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5 
....................     SSD1306_command(0x80);                                  // the suggested ratio 0x80 
....................     SSD1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8 
....................     SSD1306_command(0x1F); 
....................     SSD1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3 
....................     SSD1306_command(0x0);                                   // no offset 
....................     SSD1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0  
....................     SSD1306_command(SSD1306_CHARGEPUMP);                    // 0x8D 
....................     if (vccstate == SSD1306_EXTERNALVCC)  
....................       { SSD1306_command(0x10); } 
....................     else  
....................       { SSD1306_command(0x14); } 
....................     SSD1306_command(SSD1306_MEMORYMODE);                    // 0x20 
....................     SSD1306_command(0x00);                                  // 0x0 act like ks0108 
....................     SSD1306_command(SSD1306_SEGREMAP | 0x1); 
....................     SSD1306_command(SSD1306_COMSCANDEC); 
....................     SSD1306_command(SSD1306_SETCOMPINS);                    // 0xDA 
....................     SSD1306_command(0x02); 
....................     SSD1306_command(SSD1306_SETCONTRAST);                   // 0x81 
....................     SSD1306_command(0x8F); 
....................     SSD1306_command(SSD1306_SETPRECHARGE);                  // 0xd9 
....................     if (vccstate == SSD1306_EXTERNALVCC)  
....................       { SSD1306_command(0x22); } 
....................     else  
....................       { SSD1306_command(0xF1); } 
....................     SSD1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB 
....................     SSD1306_command(0x40); 
....................     SSD1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4 
....................     SSD1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6 
....................   #endif 
....................  
....................   #if defined SSD1306_128_64 
....................     // Init sequence for 128x64 OLED module 
....................     SSD1306_command(SSD1306_DISPLAYOFF);                    // 0xAE 
09B2:  MOVLW  AE
09B4:  MOVLB  4
09B6:  MOVWF  x5C
09B8:  MOVLB  0
09BA:  RCALL  096A
....................     SSD1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5 
09BC:  MOVLW  D5
09BE:  MOVLB  4
09C0:  MOVWF  x5C
09C2:  MOVLB  0
09C4:  RCALL  096A
....................     SSD1306_command(0x80);                                  // the suggested ratio 0x80 
09C6:  MOVLW  80
09C8:  MOVLB  4
09CA:  MOVWF  x5C
09CC:  MOVLB  0
09CE:  RCALL  096A
....................     SSD1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8 
09D0:  MOVLW  A8
09D2:  MOVLB  4
09D4:  MOVWF  x5C
09D6:  MOVLB  0
09D8:  RCALL  096A
....................     SSD1306_command(0x3F); 
09DA:  MOVLW  3F
09DC:  MOVLB  4
09DE:  MOVWF  x5C
09E0:  MOVLB  0
09E2:  RCALL  096A
....................     SSD1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3 
09E4:  MOVLW  D3
09E6:  MOVLB  4
09E8:  MOVWF  x5C
09EA:  MOVLB  0
09EC:  RCALL  096A
....................     SSD1306_command(0x00);                                   // no offset 
09EE:  MOVLB  4
09F0:  CLRF   x5C
09F2:  MOVLB  0
09F4:  RCALL  096A
....................     
....................     SSD1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0 0x40 
09F6:  MOVLW  40
09F8:  MOVLB  4
09FA:  MOVWF  x5C
09FC:  MOVLB  0
09FE:  RCALL  096A
....................     SSD1306_command(SSD1306_CHARGEPUMP);                    // 0x8D 
0A00:  MOVLW  8D
0A02:  MOVLB  4
0A04:  MOVWF  x5C
0A06:  MOVLB  0
0A08:  RCALL  096A
....................     if (vccstate == SSD1306_EXTERNALVCC)  
0A0A:  MOVLB  4
0A0C:  DECFSZ x51,W
0A0E:  BRA    0A1C
....................       { SSD1306_command(0x10); } 
0A10:  MOVLW  10
0A12:  MOVWF  x5C
0A14:  MOVLB  0
0A16:  RCALL  096A
....................     else  
0A18:  BRA    0A24
0A1A:  MOVLB  4
....................       { SSD1306_command(0x14); } 
0A1C:  MOVLW  14
0A1E:  MOVWF  x5C
0A20:  MOVLB  0
0A22:  RCALL  096A
....................     SSD1306_command(SSD1306_MEMORYMODE);                    // 0x20 
0A24:  MOVLW  20
0A26:  MOVLB  4
0A28:  MOVWF  x5C
0A2A:  MOVLB  0
0A2C:  RCALL  096A
....................     SSD1306_command(0x00);                                  // 0x0 act like ks0108 
0A2E:  MOVLB  4
0A30:  CLRF   x5C
0A32:  MOVLB  0
0A34:  RCALL  096A
....................     SSD1306_command(SSD1306_SEGREMAP | 0x1); 
0A36:  MOVLW  A1
0A38:  MOVLB  4
0A3A:  MOVWF  x5C
0A3C:  MOVLB  0
0A3E:  RCALL  096A
....................     SSD1306_command(SSD1306_COMSCANDEC); 
0A40:  MOVLW  C8
0A42:  MOVLB  4
0A44:  MOVWF  x5C
0A46:  MOVLB  0
0A48:  RCALL  096A
....................     SSD1306_command(SSD1306_SETCOMPINS);                    // 0xDA 
0A4A:  MOVLW  DA
0A4C:  MOVLB  4
0A4E:  MOVWF  x5C
0A50:  MOVLB  0
0A52:  RCALL  096A
....................     SSD1306_command(0x12); 
0A54:  MOVLW  12
0A56:  MOVLB  4
0A58:  MOVWF  x5C
0A5A:  MOVLB  0
0A5C:  RCALL  096A
....................     SSD1306_command(SSD1306_SETCONTRAST);                   // 0x81 
0A5E:  MOVLW  81
0A60:  MOVLB  4
0A62:  MOVWF  x5C
0A64:  MOVLB  0
0A66:  RCALL  096A
....................     if (vccstate == SSD1306_EXTERNALVCC)  
0A68:  MOVLB  4
0A6A:  DECFSZ x51,W
0A6C:  BRA    0A7A
....................       { SSD1306_command(0x9F); } 
0A6E:  MOVLW  9F
0A70:  MOVWF  x5C
0A72:  MOVLB  0
0A74:  RCALL  096A
....................     else  
0A76:  BRA    0A82
0A78:  MOVLB  4
....................       { SSD1306_command(0xCF); } 
0A7A:  MOVLW  CF
0A7C:  MOVWF  x5C
0A7E:  MOVLB  0
0A80:  RCALL  096A
....................     SSD1306_command(SSD1306_SETPRECHARGE);                  // 0xd9 
0A82:  MOVLW  D9
0A84:  MOVLB  4
0A86:  MOVWF  x5C
0A88:  MOVLB  0
0A8A:  RCALL  096A
....................     if (vccstate == SSD1306_EXTERNALVCC)  
0A8C:  MOVLB  4
0A8E:  DECFSZ x51,W
0A90:  BRA    0A9E
....................       { SSD1306_command(0x22); } 
0A92:  MOVLW  22
0A94:  MOVWF  x5C
0A96:  MOVLB  0
0A98:  RCALL  096A
....................     else  
0A9A:  BRA    0AA6
0A9C:  MOVLB  4
....................       { SSD1306_command(0xF1); } 
0A9E:  MOVLW  F1
0AA0:  MOVWF  x5C
0AA2:  MOVLB  0
0AA4:  RCALL  096A
....................     SSD1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB 
0AA6:  MOVLW  DB
0AA8:  MOVLB  4
0AAA:  MOVWF  x5C
0AAC:  MOVLB  0
0AAE:  RCALL  096A
....................     SSD1306_command(0x40); 
0AB0:  MOVLW  40
0AB2:  MOVLB  4
0AB4:  MOVWF  x5C
0AB6:  MOVLB  0
0AB8:  RCALL  096A
....................     SSD1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4 
0ABA:  MOVLW  A4
0ABC:  MOVLB  4
0ABE:  MOVWF  x5C
0AC0:  MOVLB  0
0AC2:  RCALL  096A
....................     SSD1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6 
0AC4:  MOVLW  A6
0AC6:  MOVLB  4
0AC8:  MOVWF  x5C
0ACA:  MOVLB  0
0ACC:  RCALL  096A
....................   #endif 
....................  
....................   SSD1306_command(SSD1306_DISPLAYON);//--turn on oled panel 
0ACE:  MOVLW  AF
0AD0:  MOVLB  4
0AD2:  MOVWF  x5C
0AD4:  MOVLB  0
0AD6:  RCALL  096A
.................... } 
0AD8:  RETLW  00
....................  
.................... void SSD1306_DrawPixel(int16 x, int16 y, int1 color = TRUE) 
.................... { 
....................     if ((x < 0) || (x >= SSD1306_LCDWIDTH) || (y < 0) || (y >= SSD1306_LCDHEIGHT)) 
*
0B0C:  MOVLB  4
0B0E:  MOVF   x83,F
0B10:  BNZ   0B28
0B12:  MOVF   x82,W
0B14:  SUBLW  7F
0B16:  BC    0B1E
0B18:  BRA    0B28
0B1A:  BTFSC  00.0
0B1C:  BRA    0B28
0B1E:  MOVF   x85,F
0B20:  BNZ   0B28
0B22:  MOVF   x84,W
0B24:  SUBLW  3F
0B26:  BC    0B2A
....................     return; 
0B28:  BRA    0C24
....................  
....................   if (color) 
0B2A:  MOVF   x86,F
0B2C:  BZ    0BA4
....................     ssd1306_buffer[x + (y/8) * SSD1306_LCDWIDTH] |=  (1 << (y & 7)); 
0B2E:  RRCF   x85,W
0B30:  MOVWF  x88
0B32:  RRCF   x84,W
0B34:  MOVWF  x87
0B36:  RRCF   x88,F
0B38:  RRCF   x87,F
0B3A:  RRCF   x88,F
0B3C:  RRCF   x87,F
0B3E:  MOVLW  1F
0B40:  ANDWF  x88,F
0B42:  RLCF   x87,W
0B44:  MOVWF  02
0B46:  RLCF   x88,W
0B48:  MOVWF  03
0B4A:  RLCF   02,F
0B4C:  RLCF   03,F
0B4E:  RLCF   02,F
0B50:  RLCF   03,F
0B52:  RLCF   02,F
0B54:  RLCF   03,F
0B56:  RLCF   02,F
0B58:  RLCF   03,F
0B5A:  RLCF   02,F
0B5C:  RLCF   03,F
0B5E:  RLCF   02,F
0B60:  RLCF   03,F
0B62:  MOVLW  80
0B64:  ANDWF  02,F
0B66:  MOVF   02,W
0B68:  ADDWF  x82,W
0B6A:  MOVWF  x87
0B6C:  MOVF   03,W
0B6E:  ADDWFC x83,W
0B70:  MOVWF  x88
0B72:  MOVLW  1C
0B74:  ADDWF  x87,W
0B76:  MOVWF  FE9
0B78:  MOVLW  00
0B7A:  ADDWFC x88,W
0B7C:  MOVWF  FEA
0B7E:  MOVF   x84,W
0B80:  ANDLW  07
0B82:  MOVWF  00
0B84:  CLRF   03
0B86:  MOVF   00,W
0B88:  CLRF   03
0B8A:  MOVLW  01
0B8C:  MOVWF  02
0B8E:  MOVF   00,F
0B90:  BZ    0B9C
0B92:  BCF    FD8.0
0B94:  RLCF   02,F
0B96:  RLCF   03,F
0B98:  DECFSZ 00,F
0B9A:  BRA    0B92
0B9C:  MOVF   02,W
0B9E:  IORWF  FEF,W
0BA0:  MOVWF  FEF
....................   else 
0BA2:  BRA    0C24
....................     ssd1306_buffer[x + (y/8) * SSD1306_LCDWIDTH] &=  ~(1 << (y & 7)); 
0BA4:  RRCF   x85,W
0BA6:  MOVWF  x88
0BA8:  RRCF   x84,W
0BAA:  MOVWF  x87
0BAC:  RRCF   x88,F
0BAE:  RRCF   x87,F
0BB0:  RRCF   x88,F
0BB2:  RRCF   x87,F
0BB4:  MOVLW  1F
0BB6:  ANDWF  x88,F
0BB8:  RLCF   x87,W
0BBA:  MOVWF  02
0BBC:  RLCF   x88,W
0BBE:  MOVWF  03
0BC0:  RLCF   02,F
0BC2:  RLCF   03,F
0BC4:  RLCF   02,F
0BC6:  RLCF   03,F
0BC8:  RLCF   02,F
0BCA:  RLCF   03,F
0BCC:  RLCF   02,F
0BCE:  RLCF   03,F
0BD0:  RLCF   02,F
0BD2:  RLCF   03,F
0BD4:  RLCF   02,F
0BD6:  RLCF   03,F
0BD8:  MOVLW  80
0BDA:  ANDWF  02,F
0BDC:  MOVF   02,W
0BDE:  ADDWF  x82,W
0BE0:  MOVWF  x87
0BE2:  MOVF   03,W
0BE4:  ADDWFC x83,W
0BE6:  MOVWF  x88
0BE8:  MOVLW  1C
0BEA:  ADDWF  x87,W
0BEC:  MOVWF  FE9
0BEE:  MOVLW  00
0BF0:  ADDWFC x88,W
0BF2:  MOVWF  FEA
0BF4:  MOVF   x84,W
0BF6:  ANDLW  07
0BF8:  MOVWF  00
0BFA:  CLRF   03
0BFC:  MOVF   00,W
0BFE:  CLRF   03
0C00:  MOVLW  01
0C02:  MOVWF  02
0C04:  MOVF   00,F
0C06:  BZ    0C12
0C08:  BCF    FD8.0
0C0A:  RLCF   02,F
0C0C:  RLCF   03,F
0C0E:  DECFSZ 00,F
0C10:  BRA    0C08
0C12:  MOVF   02,W
0C14:  CLRF   00
0C16:  DECF   00,F
0C18:  XORWF  00,F
0C1A:  MOVLW  FF
0C1C:  XORWF  03,F
0C1E:  MOVF   00,W
0C20:  ANDWF  FEF,W
0C22:  MOVWF  FEF
.................... } 
0C24:  MOVLB  0
0C26:  RETLW  00
....................  
.................... void SSD1306_StartScrollRight(uint8_t start, uint8_t stop) 
.................... { 
....................   ssd1306_command(SSD1306_RIGHT_HORIZONTAL_SCROLL); 
....................   ssd1306_command(0X00); 
....................   ssd1306_command(start); 
....................   ssd1306_command(0X00); 
....................   ssd1306_command(stop); 
....................   ssd1306_command(0X00); 
....................   ssd1306_command(0XFF); 
....................   ssd1306_command(SSD1306_ACTIVATE_SCROLL); 
.................... } 
....................  
.................... void SSD1306_StartScrollLeft(uint8_t start, uint8_t stop) 
.................... { 
....................   ssd1306_command(SSD1306_LEFT_HORIZONTAL_SCROLL); 
....................   ssd1306_command(0X00); 
....................   ssd1306_command(start); 
....................   ssd1306_command(0X00); 
....................   ssd1306_command(stop); 
....................   ssd1306_command(0X00); 
....................   ssd1306_command(0XFF); 
....................   ssd1306_command(SSD1306_ACTIVATE_SCROLL); 
.................... } 
....................  
.................... void SSD1306_StartScrollDiagRight(uint8_t start, uint8_t stop) 
.................... { 
....................   ssd1306_command(SSD1306_SET_VERTICAL_SCROLL_AREA); 
....................   ssd1306_command(0X00); 
....................   ssd1306_command(SSD1306_LCDHEIGHT); 
....................   ssd1306_command(SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL); 
....................   ssd1306_command(0X00); 
....................   ssd1306_command(start); 
....................   ssd1306_command(0X00); 
....................   ssd1306_command(stop); 
....................   ssd1306_command(0X01); 
....................   ssd1306_command(SSD1306_ACTIVATE_SCROLL); 
.................... } 
....................  
.................... void SSD1306_StartScrollDiagLeft(uint8_t start, uint8_t stop) 
.................... { 
....................   ssd1306_command(SSD1306_SET_VERTICAL_SCROLL_AREA); 
....................   ssd1306_command(0X00); 
....................   ssd1306_command(SSD1306_LCDHEIGHT); 
....................   ssd1306_command(SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL); 
....................   ssd1306_command(0X00); 
....................   ssd1306_command(start); 
....................   ssd1306_command(0X00); 
....................   ssd1306_command(stop); 
....................   ssd1306_command(0X01); 
....................   ssd1306_command(SSD1306_ACTIVATE_SCROLL); 
.................... } 
....................  
.................... void SSD1306_StopScroll(void) 
.................... { 
....................   ssd1306_command(SSD1306_DEACTIVATE_SCROLL); 
.................... } 
....................  
.................... void SSD1306_Dim(int1 dim) 
.................... { 
....................   uint8_t contrast; 
....................   if (dim) 
....................     contrast = 0; // Dimmed display 
....................   else { 
....................     if (_vccstate == SSD1306_EXTERNALVCC) 
....................       contrast = 0x9F; 
....................     else 
....................       contrast = 0xCF; 
....................   } 
....................   // the range of contrast to too small to be really useful 
....................   // it is useful to dim the display 
....................   ssd1306_command(SSD1306_SETCONTRAST); 
....................   ssd1306_command(contrast); 
.................... } 
....................  
.................... void SSD1306_Display(void) 
.................... { 
....................    ssd1306_command(ssd1306_SETLOWCOLUMN | 0x0);  // low col = 0 
*
109E:  MOVLB  4
10A0:  CLRF   x5C
10A2:  MOVLB  0
10A4:  RCALL  096A
....................    ssd1306_command(ssd1306_SETHIGHCOLUMN | 0x0);  // hi col = 0 
10A6:  MOVLW  10
10A8:  MOVLB  4
10AA:  MOVWF  x5C
10AC:  MOVLB  0
10AE:  RCALL  096A
....................    ssd1306_command(ssd1306_SETSTARTLINE | 0x0); // line #0 
10B0:  MOVLW  40
10B2:  MOVLB  4
10B4:  MOVWF  x5C
10B6:  MOVLB  0
10B8:  RCALL  096A
....................    
....................    byte height=64; 
....................    byte width=128;  
....................    byte m_row = 0; 
....................    byte m_col = 2; 
10BA:  MOVLW  40
10BC:  MOVLB  4
10BE:  MOVWF  x52
10C0:  MOVLW  80
10C2:  MOVWF  x53
10C4:  CLRF   x54
10C6:  MOVLW  02
10C8:  MOVWF  x55
....................     
....................    height >>= 3; 
10CA:  RRCF   x52,F
10CC:  RRCF   x52,F
10CE:  RRCF   x52,F
10D0:  MOVLW  1F
10D2:  ANDWF  x52,F
....................    width >>= 3; 
10D4:  RRCF   x53,F
10D6:  RRCF   x53,F
10D8:  RRCF   x53,F
10DA:  ANDWF  x53,F
....................    //Serial.println(width); 
....................     
....................    int16 p = 0; 
....................     
....................    byte i, j, k =0; 
10DC:  CLRF   x57
10DE:  CLRF   x56
10E0:  CLRF   x5A
....................     
....................    for ( i = 0; i < height; i++) { 
10E2:  CLRF   x58
10E4:  MOVF   x52,W
10E6:  SUBWF  x58,W
10E8:  BC    119A
....................       // send a bunch of data in one xmission 
....................         ssd1306_command(0xB0 + i + m_row);//set page address 
10EA:  MOVLW  B0
10EC:  ADDWF  x58,W
10EE:  ADDWF  x54,W
10F0:  MOVWF  x5B
10F2:  MOVWF  x5C
10F4:  MOVLB  0
10F6:  RCALL  096A
....................         ssd1306_command(m_col & 0xf);//set lower column address 
10F8:  MOVLB  4
10FA:  MOVF   x55,W
10FC:  ANDLW  0F
10FE:  MOVWF  x5B
1100:  MOVWF  x5C
1102:  MOVLB  0
1104:  RCALL  096A
....................         ssd1306_command(0x10 | (m_col >> 4));//set higher column address 
1106:  MOVLB  4
1108:  SWAPF  x55,W
110A:  MOVWF  00
110C:  MOVLW  0F
110E:  ANDWF  00,F
1110:  MOVF   00,W
1112:  IORLW  10
1114:  MOVWF  x5B
1116:  MOVWF  x5C
1118:  MOVLB  0
111A:  RCALL  096A
....................        
....................         for( j = 0; j < 8; j++){         
111C:  MOVLB  4
111E:  CLRF   x59
1120:  MOVF   x59,W
1122:  SUBLW  07
1124:  BNC   1196
....................          i2c_Start(SSD1306_STREAM); 
1126:  BSF    F94.1
1128:  NOP   
112A:  BSF    F94.0
112C:  NOP   
112E:  BCF    F8B.1
1130:  BCF    F94.1
1132:  NOP   
1134:  BCF    F8B.0
1136:  BCF    F94.0
....................          i2c_Write(SSD1306_STREAM, _i2caddr); 
1138:  MOVFF  16,45E
113C:  MOVLB  0
113E:  CALL   0918
....................          i2c_Write(0x40); 
1142:  MOVLW  40
1144:  MOVLB  4
1146:  MOVWF  x5E
1148:  MOVLB  0
114A:  CALL   0918
....................             for ( k = 0; k < width; k++) { 
114E:  MOVLB  4
1150:  CLRF   x5A
1152:  MOVF   x53,W
1154:  SUBWF  x5A,W
1156:  BC    117E
....................                i2c_Write(SSD1306_STREAM, ssd1306_buffer[p]); 
1158:  MOVLW  1C
115A:  ADDWF  x56,W
115C:  MOVWF  FE9
115E:  MOVLW  00
1160:  ADDWFC x57,W
1162:  MOVWF  FEA
1164:  MOVFF  FEF,45B
1168:  MOVFF  45B,45E
116C:  MOVLB  0
116E:  CALL   0918
....................                p++; 
1172:  MOVLB  4
1174:  INCF   x56,F
1176:  BTFSC  FD8.2
1178:  INCF   x57,F
....................             } 
117A:  INCF   x5A,F
117C:  BRA    1152
....................             i2c_Stop(SSD1306_STREAM); 
117E:  BCF    F94.1
1180:  NOP   
1182:  BSF    F94.0
1184:  BTFSS  F82.0
1186:  BRA    1184
1188:  NOP   
118A:  BRA    118C
118C:  NOP   
118E:  BSF    F94.1
1190:  NOP   
....................         } 
1192:  INCF   x59,F
1194:  BRA    1120
....................    } 
1196:  INCF   x58,F
1198:  BRA    10E4
.................... } 
119A:  MOVLB  0
119C:  RETLW  00
....................  
.................... void SSD1306_ClearDisplay(void) 
.................... { 
....................    int16 i; 
....................   for (i = 0; i < (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT / 8); i++) 
119E:  MOVLB  4
11A0:  CLRF   x52
11A2:  CLRF   x51
11A4:  MOVF   x52,W
11A6:  SUBLW  03
11A8:  BNC   11C0
....................     ssd1306_buffer[i] = 0; 
11AA:  MOVLW  1C
11AC:  ADDWF  x51,W
11AE:  MOVWF  FE9
11B0:  MOVLW  00
11B2:  ADDWFC x52,W
11B4:  MOVWF  FEA
11B6:  CLRF   FEF
11B8:  INCF   x51,F
11BA:  BTFSC  FD8.2
11BC:  INCF   x52,F
11BE:  BRA    11A4
.................... } 
11C0:  MOVLB  0
11C2:  RETLW  00
....................  
.................... void SSD1306_DrawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int1 color = TRUE) 
.................... { 
....................   int1 steep; 
....................   int8_t ystep; 
....................   uint8_t dx, dy; 
....................   int16_t err; 
....................   steep = abs(y1 - y0) > abs(x1 - x0); 
*
0C28:  MOVLB  4
0C2A:  BCF    x74.0
0C2C:  MOVF   x6D,W
0C2E:  SUBWF  x71,W
0C30:  MOVWF  x82
0C32:  MOVF   x6E,W
0C34:  SUBWFB x72,W
0C36:  MOVWF  x83
0C38:  MOVWF  03
0C3A:  MOVF   x82,W
0C3C:  BTFSS  x83.7
0C3E:  BRA    0C50
0C40:  MOVLW  00
0C42:  BSF    FD8.0
0C44:  SUBFWB x82,W
0C46:  MOVWF  00
0C48:  MOVLW  00
0C4A:  SUBFWB x83,W
0C4C:  MOVWF  03
0C4E:  MOVF   00,W
0C50:  MOVWF  x82
0C52:  MOVFF  03,483
0C56:  MOVF   x6B,W
0C58:  SUBWF  x6F,W
0C5A:  MOVWF  x84
0C5C:  MOVF   x6C,W
0C5E:  SUBWFB x70,W
0C60:  MOVWF  x85
0C62:  MOVWF  03
0C64:  MOVF   x84,W
0C66:  BTFSS  x85.7
0C68:  BRA    0C7A
0C6A:  MOVLW  00
0C6C:  BSF    FD8.0
0C6E:  SUBFWB x84,W
0C70:  MOVWF  00
0C72:  MOVLW  00
0C74:  SUBFWB x85,W
0C76:  MOVWF  03
0C78:  MOVF   00,W
0C7A:  MOVWF  01
0C7C:  BTFSS  03.7
0C7E:  BRA    0C86
0C80:  BTFSS  x83.7
0C82:  BRA    0C98
0C84:  BRA    0C8A
0C86:  BTFSC  x83.7
0C88:  BRA    0C9A
0C8A:  MOVF   03,W
0C8C:  SUBWF  x83,W
0C8E:  BNC   0C9A
0C90:  BNZ   0C98
0C92:  MOVF   x82,W
0C94:  SUBWF  01,W
0C96:  BC    0C9A
0C98:  BSF    x74.0
....................   if (steep) { 
0C9A:  BTFSS  x74.0
0C9C:  BRA    0CCE
....................     ssd1306_swap(x0, y0); 
0C9E:  MOVFF  46C,47B
0CA2:  MOVFF  46B,47A
0CA6:  MOVFF  46E,46C
0CAA:  MOVFF  46D,46B
0CAE:  MOVFF  47B,46E
0CB2:  MOVFF  47A,46D
....................     ssd1306_swap(x1, y1); 
0CB6:  MOVFF  470,47D
0CBA:  MOVFF  46F,47C
0CBE:  MOVFF  472,470
0CC2:  MOVFF  471,46F
0CC6:  MOVFF  47D,472
0CCA:  MOVFF  47C,471
....................   } 
....................   if (x0 > x1) { 
0CCE:  BTFSS  x70.7
0CD0:  BRA    0CD8
0CD2:  BTFSS  x6C.7
0CD4:  BRA    0CEA
0CD6:  BRA    0CDC
0CD8:  BTFSC  x6C.7
0CDA:  BRA    0D1A
0CDC:  MOVF   x70,W
0CDE:  SUBWF  x6C,W
0CE0:  BNC   0D1A
0CE2:  BNZ   0CEA
0CE4:  MOVF   x6B,W
0CE6:  SUBWF  x6F,W
0CE8:  BC    0D1A
....................     ssd1306_swap(x0, x1); 
0CEA:  MOVFF  46C,47F
0CEE:  MOVFF  46B,47E
0CF2:  MOVFF  470,46C
0CF6:  MOVFF  46F,46B
0CFA:  MOVFF  47F,470
0CFE:  MOVFF  47E,46F
....................     ssd1306_swap(y0, y1); 
0D02:  MOVFF  46E,481
0D06:  MOVFF  46D,480
0D0A:  MOVFF  472,46E
0D0E:  MOVFF  471,46D
0D12:  MOVFF  481,472
0D16:  MOVFF  480,471
....................   } 
....................   dx = x1 - x0; 
0D1A:  MOVF   x6B,W
0D1C:  SUBWF  x6F,W
0D1E:  MOVWF  00
0D20:  MOVF   x6C,W
0D22:  SUBWFB x70,W
0D24:  MOVFF  00,476
....................   dy = abs(y1 - y0); 
0D28:  MOVF   x6D,W
0D2A:  SUBWF  x71,W
0D2C:  MOVWF  x82
0D2E:  MOVF   x6E,W
0D30:  SUBWFB x72,W
0D32:  MOVWF  x83
0D34:  MOVWF  03
0D36:  MOVF   x82,W
0D38:  BTFSS  x83.7
0D3A:  BRA    0D4C
0D3C:  MOVLW  00
0D3E:  BSF    FD8.0
0D40:  SUBFWB x82,W
0D42:  MOVWF  00
0D44:  MOVLW  00
0D46:  SUBFWB x83,W
0D48:  MOVWF  03
0D4A:  MOVF   00,W
0D4C:  MOVWF  x77
....................  
....................   err = dx / 2; 
0D4E:  BCF    FD8.0
0D50:  RRCF   x76,W
0D52:  CLRF   03
0D54:  MOVWF  x78
0D56:  MOVFF  03,479
....................   if (y0 < y1) 
0D5A:  BTFSS  x6E.7
0D5C:  BRA    0D64
0D5E:  BTFSS  x72.7
0D60:  BRA    0D76
0D62:  BRA    0D68
0D64:  BTFSC  x72.7
0D66:  BRA    0D7C
0D68:  MOVF   x6E,W
0D6A:  SUBWF  x72,W
0D6C:  BNC   0D7C
0D6E:  BNZ   0D76
0D70:  MOVF   x71,W
0D72:  SUBWF  x6D,W
0D74:  BC    0D7C
....................     ystep = 1; 
0D76:  MOVLW  01
0D78:  MOVWF  x75
....................   else 
0D7A:  BRA    0D80
....................     ystep = -1; 
0D7C:  MOVLW  FF
0D7E:  MOVWF  x75
....................  
....................   for (; x0 <= x1; x0++) { 
0D80:  BTFSS  x6C.7
0D82:  BRA    0D8A
0D84:  BTFSS  x70.7
0D86:  BRA    0D9C
0D88:  BRA    0D8E
0D8A:  BTFSC  x70.7
0D8C:  BRA    0E3E
0D8E:  MOVF   x6C,W
0D90:  SUBWF  x70,W
0D92:  BNC   0E3E
0D94:  BNZ   0D9C
0D96:  MOVF   x6B,W
0D98:  SUBWF  x6F,W
0D9A:  BNC   0E3E
....................     if (steep) { 
0D9C:  BTFSS  x74.0
0D9E:  BRA    0DDA
....................       if(color) SSD1306_DrawPixel(y0, x0); 
0DA0:  MOVF   x73,F
0DA2:  BZ    0DC0
0DA4:  MOVFF  46E,483
0DA8:  MOVFF  46D,482
0DAC:  MOVFF  46C,485
0DB0:  MOVFF  46B,484
0DB4:  MOVLW  01
0DB6:  MOVWF  x86
0DB8:  MOVLB  0
0DBA:  RCALL  0B0C
....................       else      SSD1306_DrawPixel(y0, x0, FALSE); 
0DBC:  BRA    0DD6
0DBE:  MOVLB  4
0DC0:  MOVFF  46E,483
0DC4:  MOVFF  46D,482
0DC8:  MOVFF  46C,485
0DCC:  MOVFF  46B,484
0DD0:  CLRF   x86
0DD2:  MOVLB  0
0DD4:  RCALL  0B0C
....................     } 
....................     else { 
0DD6:  BRA    0E10
0DD8:  MOVLB  4
....................       if(color) SSD1306_DrawPixel(x0, y0); 
0DDA:  MOVF   x73,F
0DDC:  BZ    0DFA
0DDE:  MOVFF  46C,483
0DE2:  MOVFF  46B,482
0DE6:  MOVFF  46E,485
0DEA:  MOVFF  46D,484
0DEE:  MOVLW  01
0DF0:  MOVWF  x86
0DF2:  MOVLB  0
0DF4:  RCALL  0B0C
....................       else      SSD1306_DrawPixel(x0, y0, FALSE); 
0DF6:  BRA    0E10
0DF8:  MOVLB  4
0DFA:  MOVFF  46C,483
0DFE:  MOVFF  46B,482
0E02:  MOVFF  46E,485
0E06:  MOVFF  46D,484
0E0A:  CLRF   x86
0E0C:  MOVLB  0
0E0E:  RCALL  0B0C
....................     } 
....................     err -= dy; 
0E10:  MOVLB  4
0E12:  MOVF   x77,W
0E14:  SUBWF  x78,F
0E16:  MOVLW  00
0E18:  SUBWFB x79,F
....................     if (err < 0) { 
0E1A:  BTFSC  x79.7
0E1C:  BRA    0E20
0E1E:  BRA    0E36
....................       y0  += ystep; 
0E20:  CLRF   03
0E22:  MOVF   x75,W
0E24:  BTFSC  FE8.7
0E26:  DECF   03,F
0E28:  ADDWF  x6D,F
0E2A:  MOVF   03,W
0E2C:  ADDWFC x6E,F
....................       err += dx; 
0E2E:  MOVF   x76,W
0E30:  ADDWF  x78,F
0E32:  MOVLW  00
0E34:  ADDWFC x79,F
....................     } 
....................   } 
0E36:  INCF   x6B,F
0E38:  BTFSC  FD8.2
0E3A:  INCF   x6C,F
0E3C:  BRA    0D80
.................... } 
0E3E:  MOVLB  0
0E40:  RETLW  00
....................  
.................... void SSD1306_DrawFastHLine(uint8_t x, uint8_t y, uint8_t w, int1 color = TRUE) 
.................... { 
....................    SSD1306_DrawLine(x, y, x + w - 1, y, color); 
*
13E4:  MOVLB  4
13E6:  MOVF   x58,W
13E8:  ADDWF  x56,W
13EA:  ADDLW  FF
13EC:  MOVWF  x5A
13EE:  CLRF   x6C
13F0:  MOVFF  456,46B
13F4:  CLRF   x6E
13F6:  MOVFF  457,46D
13FA:  CLRF   x70
13FC:  MOVWF  x6F
13FE:  CLRF   x72
1400:  MOVFF  457,471
1404:  MOVFF  459,473
1408:  MOVLB  0
140A:  RCALL  0C28
.................... } 
140C:  RETLW  00
....................  
.................... void SSD1306_DrawFastVLine(uint8_t x, uint8_t y, uint8_t h, int1 color = TRUE) 
.................... { 
....................   SSD1306_DrawLine(x, y, x, y + h - 1, color); 
*
0E42:  MOVLB  4
0E44:  MOVF   x68,W
0E46:  ADDWF  x67,W
0E48:  ADDLW  FF
0E4A:  MOVWF  x6A
0E4C:  CLRF   x6C
0E4E:  MOVFF  466,46B
0E52:  CLRF   x6E
0E54:  MOVFF  467,46D
0E58:  CLRF   x70
0E5A:  MOVFF  466,46F
0E5E:  CLRF   x72
0E60:  MOVWF  x71
0E62:  MOVFF  469,473
0E66:  MOVLB  0
0E68:  RCALL  0C28
.................... } 
0E6A:  RETLW  00
....................  
.................... void SSD1306_FillRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, int1 color = TRUE) 
.................... { 
....................    int16 i; 
....................   for (i = x; i < x + w; i++) 
0E6C:  MOVLB  4
0E6E:  CLRF   x65
0E70:  MOVFF  45F,464
0E74:  MOVF   x61,W
0E76:  ADDWF  x5F,W
0E78:  MOVF   x65,F
0E7A:  BNZ   0E9E
0E7C:  SUBWF  x64,W
0E7E:  BC    0E9E
....................     SSD1306_DrawFastVLine(i, y, h, color); 
0E80:  MOVFF  464,466
0E84:  MOVFF  460,467
0E88:  MOVFF  462,468
0E8C:  MOVFF  463,469
0E90:  MOVLB  0
0E92:  RCALL  0E42
0E94:  MOVLB  4
0E96:  INCF   x64,F
0E98:  BTFSC  FD8.2
0E9A:  INCF   x65,F
0E9C:  BRA    0E74
.................... } 
0E9E:  MOVLB  0
0EA0:  RETLW  00
....................  
.................... void SSD1306_FillScreen(int1 color = TRUE) { 
....................   SSD1306_FillRect(0, 0, SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT, color); 
.................... } 
....................  
.................... void SSD1306_DrawCircle(int16_t x0, int16_t y0, int16_t r) 
.................... { 
....................   int16_t f = 1 - r; 
....................   int16_t ddF_x = 1; 
....................   int16_t ddF_y = -2 * r; 
....................   int16_t x = 0; 
....................   int16_t y = r; 
....................  
....................   SSD1306_DrawPixel(x0  , y0 + r); 
....................   SSD1306_DrawPixel(x0  , y0 - r); 
....................   SSD1306_DrawPixel(x0 + r, y0); 
....................   SSD1306_DrawPixel(x0 - r, y0); 
....................  
....................   while (x < y) { 
....................     if (f >= 0) { 
....................       y--; 
....................       ddF_y += 2; 
....................       f += ddF_y; 
....................     } 
....................     x++; 
....................     ddF_x += 2; 
....................     f += ddF_x; 
....................  
....................     SSD1306_DrawPixel(x0 + x, y0 + y); 
....................     SSD1306_DrawPixel(x0 - x, y0 + y); 
....................     SSD1306_DrawPixel(x0 + x, y0 - y); 
....................     SSD1306_DrawPixel(x0 - x, y0 - y); 
....................     SSD1306_DrawPixel(x0 + y, y0 + x); 
....................     SSD1306_DrawPixel(x0 - y, y0 + x); 
....................     SSD1306_DrawPixel(x0 + y, y0 - x); 
....................     SSD1306_DrawPixel(x0 - y, y0 - x); 
....................   } 
....................  
.................... } 
....................  
.................... void SSD1306_DrawCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername) 
.................... { 
....................   int16_t f     = 1 - r; 
....................   int16_t ddF_x = 1; 
....................   int16_t ddF_y = -2 * r; 
....................   int16_t x     = 0; 
....................   int16_t y     = r; 
....................  
....................   while (x < y) { 
....................     if (f >= 0) { 
....................       y--; 
....................       ddF_y += 2; 
....................       f     += ddF_y; 
....................     } 
....................     x++; 
....................     ddF_x += 2; 
....................     f     += ddF_x; 
....................     if (cornername & 0x4) { 
....................       SSD1306_DrawPixel(x0 + x, y0 + y); 
....................       SSD1306_DrawPixel(x0 + y, y0 + x); 
....................     } 
....................     if (cornername & 0x2) { 
....................       SSD1306_DrawPixel(x0 + x, y0 - y); 
....................       SSD1306_DrawPixel(x0 + y, y0 - x); 
....................     } 
....................     if (cornername & 0x8) { 
....................       SSD1306_DrawPixel(x0 - y, y0 + x); 
....................       SSD1306_DrawPixel(x0 - x, y0 + y); 
....................     } 
....................     if (cornername & 0x1) { 
....................       SSD1306_DrawPixel(x0 - y, y0 - x); 
....................       SSD1306_DrawPixel(x0 - x, y0 - y); 
....................     } 
....................   } 
....................  
.................... } 
....................  
.................... void SSD1306_FillCircle(int16_t x0, int16_t y0, int16_t r, int1 color = TRUE) 
.................... { 
....................   SSD1306_DrawFastVLine(x0, y0 - r, 2 * r + 1, color); 
....................   SSD1306_FillCircleHelper(x0, y0, r, 3, 0, color); 
.................... } 
....................  
.................... // Used to do circles and roundrects 
.................... void SSD1306_FillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, int1 color = TRUE) { 
....................   int16_t f     = 1 - r; 
....................   int16_t ddF_x = 1; 
....................   int16_t ddF_y = -2 * r; 
....................   int16_t x     = 0; 
....................   int16_t y     = r; 
....................  
....................   while (x < y) { 
....................     if (f >= 0) { 
....................       y--; 
....................       ddF_y += 2; 
....................       f     += ddF_y; 
....................     } 
....................     x++; 
....................     ddF_x += 2; 
....................     f     += ddF_x; 
....................  
....................     if (cornername & 0x01) { 
....................       SSD1306_DrawFastVLine(x0 + x, y0 - y, 2 * y + 1 + delta, color); 
....................       SSD1306_DrawFastVLine(x0 + y, y0 - x, 2 * x + 1 + delta, color); 
....................     } 
....................     if (cornername & 0x02) { 
....................       SSD1306_DrawFastVLine(x0 - x, y0 - y, 2 * y + 1 + delta, color); 
....................       SSD1306_DrawFastVLine(x0 - y, y0 - x, 2 * x + 1 + delta, color); 
....................     } 
....................   } 
....................  
.................... } 
....................  
.................... // Draw a rectangle 
.................... void SSD1306_DrawRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h) 
.................... { 
....................   SSD1306_DrawFastHLine(x, y, w); 
*
140E:  MOVFF  451,456
1412:  MOVFF  452,457
1416:  MOVFF  453,458
141A:  MOVLW  01
141C:  MOVLB  4
141E:  MOVWF  x59
1420:  MOVLB  0
1422:  RCALL  13E4
....................   SSD1306_DrawFastHLine(x, y + h - 1, w); 
1424:  MOVLB  4
1426:  MOVF   x54,W
1428:  ADDWF  x52,W
142A:  ADDLW  FF
142C:  MOVWF  x55
142E:  MOVFF  451,456
1432:  MOVWF  x57
1434:  MOVFF  453,458
1438:  MOVLW  01
143A:  MOVWF  x59
143C:  MOVLB  0
143E:  RCALL  13E4
....................   SSD1306_DrawFastVLine(x, y, h); 
1440:  MOVFF  451,466
1444:  MOVFF  452,467
1448:  MOVFF  454,468
144C:  MOVLW  01
144E:  MOVLB  4
1450:  MOVWF  x69
1452:  MOVLB  0
1454:  RCALL  0E42
....................   SSD1306_DrawFastVLine(x + w - 1, y, h); 
1456:  MOVLB  4
1458:  MOVF   x53,W
145A:  ADDWF  x51,W
145C:  ADDLW  FF
145E:  MOVWF  x55
1460:  MOVWF  x66
1462:  MOVFF  452,467
1466:  MOVFF  454,468
146A:  MOVLW  01
146C:  MOVWF  x69
146E:  MOVLB  0
1470:  RCALL  0E42
.................... } 
1472:  RETLW  00
....................  
.................... // Draw a rounded rectangle 
.................... void SSD1306_DrawRoundRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t r) 
.................... { 
....................   // smarter version 
....................   SSD1306_DrawFastHLine(x + r, y, w - 2 * r); // Top 
....................   SSD1306_DrawFastHLine(x + r, y + h - 1, w - 2 * r); // Bottom 
....................   SSD1306_DrawFastVLine(x, y + r, h - 2 * r); // Left 
....................   SSD1306_DrawFastVLine(x + w - 1, y + r, h - 2 * r); // Right 
....................   // draw four corners 
....................   SSD1306_DrawCircleHelper(x + r, y + r, r, 1); 
....................   SSD1306_DrawCircleHelper(x + w - r - 1, y + r, r, 2); 
....................   SSD1306_DrawCircleHelper(x + w - r - 1, y + h - r - 1, r, 4); 
....................   SSD1306_DrawCircleHelper(x + r, y + h - r - 1, r, 8); 
.................... } 
....................  
.................... // Fill a rounded rectangle 
.................... void SSD1306_FillRoundRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t r, int1 color = TRUE) 
.................... { 
....................   // smarter version 
....................   SSD1306_FillRect(x + r, y, w - 2 * r, h, color); 
....................   // draw four corners 
....................   SSD1306_FillCircleHelper(x + w - r - 1, y + r, r, 1, h - 2 * r - 1, color); 
....................   SSD1306_FillCircleHelper(x + r        , y + r, r, 2, h - 2 * r - 1, color); 
.................... } 
....................  
.................... // Draw a triangle 
.................... void SSD1306_DrawTriangle(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2) 
.................... { 
....................   SSD1306_DrawLine(x0, y0, x1, y1); 
....................   SSD1306_DrawLine(x1, y1, x2, y2); 
....................   SSD1306_DrawLine(x2, y2, x0, y0); 
.................... } 
....................  
.................... // Fill a triangle 
.................... void SSD1306_FillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, int1 color = TRUE) 
.................... { 
....................   int16_t a, b, y, last; 
....................   // Sort coordinates by Y order (y2 >= y1 >= y0) 
....................   if (y0 > y1) { 
....................     ssd1306_swap(y0, y1); ssd1306_swap(x0, x1); 
....................   } 
....................   if (y1 > y2) { 
....................     ssd1306_swap(y2, y1); ssd1306_swap(x2, x1); 
....................   } 
....................   if (y0 > y1) { 
....................     ssd1306_swap(y0, y1); ssd1306_swap(x0, x1); 
....................   } 
....................  
....................   if(y0 == y2) { // Handle awkward all-on-same-line case as its own thing 
....................     a = b = x0; 
....................     if(x1 < a)      a = x1; 
....................     else if(x1 > b) b = x1; 
....................     if(x2 < a)      a = x2; 
....................     else if(x2 > b) b = x2; 
....................     SSD1306_DrawFastHLine(a, y0, b - a + 1, color); 
....................     return; 
....................   } 
....................  
....................   int16_t 
....................   dx01 = x1 - x0, 
....................   dy01 = y1 - y0, 
....................   dx02 = x2 - x0, 
....................   dy02 = y2 - y0, 
....................   dx12 = x2 - x1, 
....................   dy12 = y2 - y1; 
....................   int32_t  sa   = 0, sb   = 0; 
....................  
....................   // For upper part of triangle, find scanline crossings for segments 
....................   // 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1 
....................   // is included here (and second loop will be skipped, avoiding a /0 
....................   // error there), otherwise scanline y1 is skipped here and handled 
....................   // in the second loop...which also avoids a /0 error here if y0=y1 
....................   // (flat-topped triangle). 
....................   if(y1 == y2) last = y1;   // Include y1 scanline 
....................   else         last = y1 - 1; // Skip it 
....................  
....................   for(y = y0; y <= last; y++) { 
....................     a   = x0 + sa / dy01; 
....................     b   = x0 + sb / dy02; 
....................     sa += dx01; 
....................     sb += dx02; 
....................     /* longhand: 
....................     a = x0 + (x1 - x0) * (y - y0) / (y1 - y0); 
....................     b = x0 + (x2 - x0) * (y - y0) / (y2 - y0); 
....................     */ 
....................     if(a > b) ssd1306_swap(a, b); 
....................     SSD1306_DrawFastHLine(a, y, b - a + 1, color); 
....................   } 
....................  
....................   // For lower part of triangle, find scanline crossings for segments 
....................   // 0-2 and 1-2.  This loop is skipped if y1=y2. 
....................   sa = dx12 * (y - y1); 
....................   sb = dx02 * (y - y0); 
....................   for(; y <= y2; y++) { 
....................     a   = x1 + sa / dy12; 
....................     b   = x0 + sb / dy02; 
....................     sa += dx12; 
....................     sb += dx02; 
....................     /* longhand: 
....................     a = x1 + (x2 - x1) * (y - y1) / (y2 - y1); 
....................     b = x0 + (x2 - x0) * (y - y0) / (y2 - y0); 
....................     */ 
....................     if(a > b) ssd1306_swap(a, b); 
....................     SSD1306_DrawFastHLine(a, y, b - a + 1, color); 
....................   } 
.................... } 
....................  
.................... // invert the display 
.................... void SSD1306_InvertDisplay(int1 i) 
.................... { 
....................   if (i) 
*
129A:  MOVLB  4
129C:  MOVF   x51,F
129E:  BZ    12AE
....................     ssd1306_command(SSD1306_INVERTDISPLAY_); 
12A0:  MOVLW  A7
12A2:  MOVWF  x5C
12A4:  MOVLB  0
12A6:  CALL   096A
....................   else 
12AA:  BRA    12B8
12AC:  MOVLB  4
....................     ssd1306_command(SSD1306_NORMALDISPLAY); 
12AE:  MOVLW  A6
12B0:  MOVWF  x5C
12B2:  MOVLB  0
12B4:  CALL   096A
.................... } 
12B8:  RETLW  00
....................  
.................... void SSD1306_SetTextWrap(int1 w) 
.................... { 
....................   wrap = w; 
.................... } 
....................  
.................... void SSD1306_DrawChar(uint8_t x, uint8_t y, uint8_t c, uint8_t size = 1) 
.................... { 
....................   SSD1306_GotoXY(x, y); 
....................   SSD1306_TextSize(size); 
....................   SSD1306_Print(c); 
.................... } 
....................  
.................... void SSD1306_DrawText(uint8_t x, uint8_t y, char *_text, uint8_t size = 1) 
.................... { 
....................   SSD1306_GotoXY(x, y); 
*
1054:  MOVFF  451,456
1058:  MOVFF  452,457
105C:  BRA    0ADA
....................   SSD1306_TextSize(size); 
105E:  MOVFF  455,456
1062:  BRA    0AF8
....................   while(*_text != '\0') 
....................     SSD1306_Print(*_text++); 
1064:  MOVFF  454,03
1068:  MOVLB  4
106A:  MOVFF  453,FE9
106E:  MOVFF  454,FEA
1072:  MOVF   FEF,F
1074:  BZ    109A
1076:  MOVFF  454,03
107A:  MOVF   x53,W
107C:  INCF   x53,F
107E:  BTFSC  FD8.2
1080:  INCF   x54,F
1082:  MOVWF  FE9
1084:  MOVFF  03,FEA
1088:  MOVFF  FEF,456
108C:  MOVFF  456,457
1090:  MOVLB  0
1092:  BRA    0EA2
1094:  MOVLB  0
1096:  BRA    1064
1098:  MOVLB  4
....................  
.................... } 
109A:  MOVLB  0
109C:  RETLW  00
....................  
.................... // move cursor to position (x, y) 
.................... void SSD1306_GotoXY(uint8_t x, uint8_t y) 
.................... { 
....................   if((x >= SSD1306_LCDWIDTH) || (y >= SSD1306_LCDHEIGHT)) 
*
0ADA:  MOVLB  4
0ADC:  MOVF   x56,W
0ADE:  SUBLW  7F
0AE0:  BNC   0AE8
0AE2:  MOVF   x57,W
0AE4:  SUBLW  3F
0AE6:  BC    0AEA
....................     return; 
0AE8:  BRA    0AF2
....................   x_pos = x; 
0AEA:  MOVFF  456,18
....................   y_pos = y; 
0AEE:  MOVFF  457,19
.................... } 
0AF2:  MOVLB  0
0AF4:  GOTO   105E (RETURN)
....................  
.................... // set text size 
.................... void SSD1306_TextSize(uint8_t t_size) 
.................... { 
....................   if(t_size < 1) 
0AF8:  MOVLB  4
0AFA:  MOVF   x56,F
0AFC:  BNZ   0B02
....................     t_size = 1; 
0AFE:  MOVLW  01
0B00:  MOVWF  x56
....................   text_size = t_size; 
0B02:  MOVFF  456,1A
.................... } 
0B06:  MOVLB  0
0B08:  GOTO   1064 (RETURN)
....................  
.................... /* print single char 
....................     \a  Set cursor position to upper left (0, 0) 
....................     \b  Move back one position 
....................     \n  Go to start of current line 
....................     \r  Go to line below 
.................... */ 
.................... void SSD1306_Print(uint8_t c) 
.................... { 
....................   int1 _color; 
....................   uint8_t i, j, line; 
....................    
....................   if (c == ' ' && x_pos == 0 && wrap) 
*
0EA2:  MOVLB  4
0EA4:  MOVF   x57,W
0EA6:  SUBLW  20
0EA8:  BNZ   0EB4
0EAA:  MOVF   18,F
0EAC:  BNZ   0EB4
0EAE:  BTFSS  1B.0
0EB0:  BRA    0EB4
....................     return; 
0EB2:  BRA    104E
....................   if(c == '\a') { 
0EB4:  MOVF   x57,W
0EB6:  SUBLW  07
0EB8:  BNZ   0EC2
....................     x_pos = y_pos = 0; 
0EBA:  CLRF   19
0EBC:  MOVFF  19,18
....................     return; 
0EC0:  BRA    104E
....................   } 
....................   if( (c == '\b') && (x_pos >= text_size * 6) ) { 
0EC2:  MOVF   x57,W
0EC4:  SUBLW  08
0EC6:  BNZ   0EDC
0EC8:  MOVF   1A,W
0ECA:  MULLW  06
0ECC:  MOVF   FF3,W
0ECE:  SUBWF  18,W
0ED0:  BNC   0EDC
....................     x_pos -= text_size * 6; 
0ED2:  MOVF   1A,W
0ED4:  MULLW  06
0ED6:  MOVF   FF3,W
0ED8:  SUBWF  18,F
....................     return; 
0EDA:  BRA    104E
....................   } 
....................   if(c == '\r') { 
0EDC:  MOVF   x57,W
0EDE:  SUBLW  0D
0EE0:  BNZ   0EE6
....................     x_pos = 0; 
0EE2:  CLRF   18
....................     return; 
0EE4:  BRA    104E
....................   } 
....................   if(c == '\n') { 
0EE6:  MOVF   x57,W
0EE8:  SUBLW  0A
0EEA:  BNZ   0F04
....................     y_pos += text_size * 8; 
0EEC:  MOVF   1A,W
0EEE:  MULLW  08
0EF0:  MOVF   FF3,W
0EF2:  ADDWF  19,F
....................     if((y_pos + text_size * 7) > SSD1306_LCDHEIGHT) 
0EF4:  MOVF   1A,W
0EF6:  MULLW  07
0EF8:  MOVF   FF3,W
0EFA:  ADDWF  19,W
0EFC:  SUBLW  40
0EFE:  BC    0F02
....................       y_pos = 0; 
0F00:  CLRF   19
....................     return; 
0F02:  BRA    104E
....................   } 
....................  
....................   if((c < ' ') || (c > '~')) 
0F04:  MOVF   x57,W
0F06:  SUBLW  1F
0F08:  BC    0F10
0F0A:  MOVF   x57,W
0F0C:  SUBLW  7E
0F0E:  BC    0F14
....................     c = '?'; 
0F10:  MOVLW  3F
0F12:  MOVWF  x57
....................    
....................   for(i = 0; i < 5; i++ ) { 
0F14:  CLRF   x59
0F16:  MOVF   x59,W
0F18:  SUBLW  04
0F1A:  BNC   0FE2
....................     if(c < 'S') 
0F1C:  MOVF   x57,W
0F1E:  SUBLW  52
0F20:  BNC   0F44
....................       line = font[(c - ' ') * 5 + i]; 
0F22:  MOVLW  20
0F24:  SUBWF  x57,W
0F26:  MULLW  05
0F28:  MOVF   FF3,W
0F2A:  ADDWF  x59,W
0F2C:  CLRF   03
0F2E:  MOVFF  FF2,45C
0F32:  BCF    FF2.7
0F34:  MOVLB  0
0F36:  CALL   04AE
0F3A:  MOVLB  4
0F3C:  BTFSC  x5C.7
0F3E:  BSF    FF2.7
0F40:  MOVWF  x5B
....................     else 
0F42:  BRA    0F64
....................       line = font2[(c - 'S') * 5 + i]; 
0F44:  MOVLW  53
0F46:  SUBWF  x57,W
0F48:  MULLW  05
0F4A:  MOVF   FF3,W
0F4C:  ADDWF  x59,W
0F4E:  CLRF   03
0F50:  MOVFF  FF2,45C
0F54:  BCF    FF2.7
0F56:  MOVLB  0
0F58:  CALL   05C8
0F5C:  MOVLB  4
0F5E:  BTFSC  x5C.7
0F60:  BSF    FF2.7
0F62:  MOVWF  x5B
....................      
....................     for(j = 0; j < 7; j++, line >>= 1) { 
0F64:  CLRF   x5A
0F66:  MOVF   x5A,W
0F68:  SUBLW  06
0F6A:  BNC   0FDE
....................       if(line & 0x01) 
0F6C:  BTFSS  x5B.0
0F6E:  BRA    0F74
....................         _color = TRUE; 
0F70:  BSF    x58.0
....................       else 
0F72:  BRA    0F76
....................         _color = FALSE; 
0F74:  BCF    x58.0
....................       if(text_size == 1) SSD1306_DrawPixel(x_pos + i, y_pos + j, _color); 
0F76:  DECFSZ 1A,W
0F78:  BRA    0FA2
0F7A:  MOVF   x59,W
0F7C:  ADDWF  18,W
0F7E:  MOVWF  x5C
0F80:  MOVF   x5A,W
0F82:  ADDWF  19,W
0F84:  MOVWF  x5D
0F86:  MOVLW  00
0F88:  BTFSC  x58.0
0F8A:  MOVLW  01
0F8C:  CLRF   x83
0F8E:  MOVFF  45C,482
0F92:  CLRF   x85
0F94:  MOVFF  45D,484
0F98:  MOVWF  x86
0F9A:  MOVLB  0
0F9C:  RCALL  0B0C
....................       else               SSD1306_FillRect(x_pos + (i * text_size), y_pos + (j * text_size), text_size, text_size, _color); 
0F9E:  BRA    0FD2
0FA0:  MOVLB  4
0FA2:  MOVF   x59,W
0FA4:  MULWF  1A
0FA6:  MOVF   FF3,W
0FA8:  ADDWF  18,W
0FAA:  MOVWF  x5C
0FAC:  MOVF   x5A,W
0FAE:  MULWF  1A
0FB0:  MOVF   FF3,W
0FB2:  ADDWF  19,W
0FB4:  MOVWF  x5D
0FB6:  MOVLW  00
0FB8:  BTFSC  x58.0
0FBA:  MOVLW  01
0FBC:  MOVFF  45C,45F
0FC0:  MOVFF  45D,460
0FC4:  MOVFF  1A,461
0FC8:  MOVFF  1A,462
0FCC:  MOVWF  x63
0FCE:  MOVLB  0
0FD0:  RCALL  0E6C
....................     } 
0FD2:  MOVLB  4
0FD4:  MOVF   x5A,W
0FD6:  INCF   x5A,F
0FD8:  BCF    FD8.0
0FDA:  RRCF   x5B,F
0FDC:  BRA    0F66
....................   } 
0FDE:  INCF   x59,F
0FE0:  BRA    0F16
....................  
....................   SSD1306_FillRect(x_pos + (5 * text_size), y_pos, text_size, 7 * text_size, FALSE); 
0FE2:  MOVF   1A,W
0FE4:  MULLW  05
0FE6:  MOVF   FF3,W
0FE8:  ADDWF  18,W
0FEA:  MOVWF  x5C
0FEC:  MOVF   1A,W
0FEE:  MULLW  07
0FF0:  MOVFF  FF3,45D
0FF4:  MOVFF  45C,45F
0FF8:  MOVFF  19,460
0FFC:  MOVFF  1A,461
1000:  MOVFF  45D,462
1004:  CLRF   x63
1006:  MOVLB  0
1008:  RCALL  0E6C
....................    
....................   x_pos += text_size * 6; 
100A:  MOVF   1A,W
100C:  MULLW  06
100E:  MOVF   FF3,W
1010:  ADDWF  18,F
....................  
....................   if( x_pos > (SSD1306_LCDWIDTH + text_size * 6) ) 
1012:  MOVF   1A,W
1014:  MULLW  06
1016:  MOVF   FF3,W
1018:  ADDLW  80
101A:  SUBWF  18,W
101C:  BZ    1024
101E:  BNC   1024
....................     x_pos = SSD1306_LCDWIDTH; 
1020:  MOVLW  80
1022:  MOVWF  18
....................  
....................   if (wrap && (x_pos + (text_size * 5)) > SSD1306_LCDWIDTH) 
1024:  BTFSS  1B.0
1026:  BRA    104C
1028:  MOVF   1A,W
102A:  MULLW  05
102C:  MOVF   FF3,W
102E:  ADDWF  18,W
1030:  SUBLW  80
1032:  BC    104C
....................   { 
....................     x_pos = 0; 
1034:  CLRF   18
....................     y_pos += text_size * 8; 
1036:  MOVF   1A,W
1038:  MULLW  08
103A:  MOVF   FF3,W
103C:  ADDWF  19,F
....................     if((y_pos + text_size * 7) > SSD1306_LCDHEIGHT) 
103E:  MOVF   1A,W
1040:  MULLW  07
1042:  MOVF   FF3,W
1044:  ADDWF  19,W
1046:  SUBLW  40
1048:  BC    104C
....................       y_pos = 0; 
104A:  CLRF   19
104C:  MOVLB  4
....................   } 
.................... } 
104E:  MOVLB  0
1050:  GOTO   1064 (RETURN)
....................  
.................... // print custom char (dimension: 7x5 pixel) 
.................... void SSD1306_PutCustomC(rom uint8_t *c) 
.................... { 
....................   int1 _color; 
....................   uint8_t i, j, line; 
....................    
....................   for(i = 0; i < 5; i++ ) { 
....................     line = c[i]; 
....................  
....................     for(j = 0; j < 7; j++, line >>= 1) { 
....................       if(line & 0x01) 
....................         _color = TRUE; 
....................       else 
....................         _color = FALSE; 
....................       if(text_size == 1) SSD1306_DrawPixel(x_pos + i, y_pos + j, _color); 
....................       else               SSD1306_FillRect(x_pos + (i * text_size), y_pos + (j * text_size), text_size, text_size, _color); 
....................     } 
....................   } 
....................  
....................   SSD1306_FillRect(x_pos + (5 * text_size), y_pos, text_size, 7 * text_size, FALSE); 
....................  
....................   x_pos += (text_size * 6); 
....................  
....................   if( x_pos > (SSD1306_LCDWIDTH + text_size * 6) ) 
....................     x_pos = SSD1306_LCDWIDTH; 
....................  
....................   if (wrap && (x_pos + (text_size * 5)) > SSD1306_LCDWIDTH) 
....................   { 
....................     x_pos = 0; 
....................     y_pos += text_size * 8; 
....................     if((y_pos + text_size * 7) > SSD1306_LCDHEIGHT) 
....................       y_pos = 0; 
....................   } 
.................... } 
....................  
.................... // draw BMP stored in ROM 
.................... void SSD1306_ROMBMP(uint8_t x, uint8_t y, rom uint8_t *bitmap, uint8_t w, uint8_t h) 
.................... { 
....................    int16 i,j; 
....................   for( i = 0; i < h/8; i++ ) 
....................   {     
....................     for( j = 0; j < (uint16_t)w * 8; j++ ) 
....................     {       
....................       if( bit_test(bitmap[j/8 + i*w], j % 8) == 1 ) 
....................         SSD1306_DrawPixel(x + j/8, y + i*8 + (j % 8)); 
....................       else 
....................         SSD1306_DrawPixel(x + j/8, y + i*8 + (j % 8), 0);   
....................     } 
....................   } 
.................... } 
....................  
.................... void OLED_print_Image(unsigned char bmp, unsigned char pixel) 
.................... { 
....................     unsigned char x_pos = 0; 
....................     unsigned char page = 0; 
....................  
....................     if(pixel != 0) 
....................     { 
....................         pixel = 0xFF; 
....................     } 
....................     else 
....................     { 
....................         pixel = 0x00; 
....................     } 
....................  
....................     for(page = 0; page < 8; page++) 
....................     { 
....................          SSD1306_GotoXY(0, page); 
....................  
....................         I2C_Start(); 
....................         I2C_Write(SSD1306_I2C_Address); 
....................         I2C_Write(DAT); 
....................  
....................          for(x_pos = 0; x_pos < 128; x_pos++) 
....................          { 
....................            I2C_Write((bmp++ ^ pixel)); 
....................          } 
....................  
....................         I2C_Stop(); 
....................      } 
.................... } 
....................  
.................... // end of driver code. 
....................  
....................  
.................... #define   UP               !input(PIN_A0) 
.................... #define   DOWN             !input(PIN_A1) 
.................... #define   RIGHT            !input(PIN_A2) 
.................... #define   LEFT             !input(PIN_A3) 
....................  
.................... #define   LuzUV_on         output_bit(PIN_C2,0) 
.................... #define   LuzUV_off        output_bit(PIN_C2,1) 
....................  
.................... typedef struct{ 
....................    char Letra[20]; 
.................... }MENUU; 
....................  
.................... MENUU Menus; 
....................  
.................... short estado=0,flagModo=0,tiempoCumplido=0,seleccion=0,flaguv=0; 
.................... int8 i=0,j=0,menu=0,modo=0,opcion=0,minutos=0,segundos=0,minutosp=0,segundosp=0; 
.................... signed int8 k=0; 
.................... int16 p=0,tiempos=0,tup=0,tdown=0,tright=0,tleft=0; 
.................... char voltage[9]; 
....................  
.................... void dibujaImagen(int8 imagen){ 
....................    if(imagen==1){ 
*
11E8:  MOVLB  4
11EA:  DECFSZ x51,W
11EC:  BRA    1292
....................       for( i = 0 ; i < 64 ; i ++ ){ //Funcion para dibujar un .bmp en orientacion horizontal 
11EE:  CLRF   x30
11F0:  MOVF   x30,W
11F2:  SUBLW  3F
11F4:  BNC   1292
....................          for( j = 0 ; j < 16 ; j ++){ 
11F6:  CLRF   x31
11F8:  MOVF   x31,W
11FA:  SUBLW  0F
11FC:  BNC   128E
....................             for(k=7;k>-1;k--){       
11FE:  MOVLW  07
1200:  MOVWF  x39
1202:  MOVF   x39,W
1204:  XORLW  80
1206:  SUBLW  7F
1208:  BC    128A
....................                if( bit_test(bombillo[i][j] ,7-k ))  
120A:  CLRF   x53
120C:  MOVFF  430,452
1210:  CLRF   x55
1212:  MOVLW  10
1214:  MOVWF  x54
1216:  MOVLB  0
1218:  BRA    11C4
121A:  MOVFF  02,453
121E:  MOVFF  01,452
1222:  MOVLB  4
1224:  MOVF   x31,W
1226:  ADDWF  01,W
1228:  MOVWF  01
122A:  MOVLW  00
122C:  ADDWFC 02,W
122E:  MOVWF  03
1230:  MOVF   01,W
1232:  MOVFF  FF2,452
1236:  BCF    FF2.7
1238:  MOVFF  03,FF7
123C:  MOVLB  0
123E:  CALL   0096
1242:  MOVLB  4
1244:  BTFSC  x52.7
1246:  BSF    FF2.7
1248:  MOVWF  x52
124A:  MOVLW  07
124C:  BSF    FD8.0
124E:  SUBFWB x39,W
1250:  MOVWF  x53
1252:  MOVFF  452,00
1256:  MOVF   x53,W
1258:  MOVWF  01
125A:  BZ    1264
125C:  BCF    FD8.0
125E:  RRCF   00,F
1260:  DECFSZ 01,F
1262:  BRA    125C
1264:  BTFSS  00.0
1266:  BRA    1286
....................                   SSD1306_DrawPixel( j*8+k,i, ON ); 
1268:  MOVF   x31,W
126A:  MULLW  08
126C:  MOVF   FF3,W
126E:  ADDWF  x39,W
1270:  MOVWF  x52
1272:  CLRF   x83
1274:  MOVWF  x82
1276:  CLRF   x85
1278:  MOVFF  430,484
127C:  MOVLW  01
127E:  MOVWF  x86
1280:  MOVLB  0
1282:  RCALL  0B0C
1284:  MOVLB  4
....................             }   
1286:  DECF   x39,F
1288:  BRA    1202
....................          } 
128A:  INCF   x31,F
128C:  BRA    11F8
....................       } 
128E:  INCF   x30,F
1290:  BRA    11F0
....................    } 
....................     
....................    SSD1306_Display(); 
1292:  MOVLB  0
1294:  RCALL  109E
.................... } 
1296:  GOTO   1F8A (RETURN)
....................  
.................... #int_TIMER1 
.................... void temp1s(void){ 
....................    set_timer1(45536);//5ms 
*
082E:  MOVLW  B1
0830:  MOVWF  FCF
0832:  MOVLW  E0
0834:  MOVWF  FCE
....................    tiempos++; 
0836:  MOVLB  4
0838:  INCF   x3C,F
083A:  BTFSC  FD8.2
083C:  INCF   x3D,F
....................       if(UP){ 
083E:  BSF    F92.0
0840:  BTFSC  F80.0
0842:  BRA    085A
....................          if(tup<1200) 
0844:  MOVF   x3F,W
0846:  SUBLW  04
0848:  BNC   0858
084A:  BNZ   0852
084C:  MOVF   x3E,W
084E:  SUBLW  AF
0850:  BNC   0858
....................             tup++; 
0852:  INCF   x3E,F
0854:  BTFSC  FD8.2
0856:  INCF   x3F,F
....................       }else{ 
0858:  BRA    085E
....................          tup=0; 
085A:  CLRF   x3F
085C:  CLRF   x3E
....................       } 
....................           
....................       if(DOWN){ 
085E:  BSF    F92.1
0860:  BTFSC  F80.1
0862:  BRA    0876
....................          if(tdown<120) 
0864:  MOVF   x41,F
0866:  BNZ   0874
0868:  MOVF   x40,W
086A:  SUBLW  77
086C:  BNC   0874
....................             tdown++; 
086E:  INCF   x40,F
0870:  BTFSC  FD8.2
0872:  INCF   x41,F
....................       }else{ 
0874:  BRA    087A
....................          tdown=0; 
0876:  CLRF   x41
0878:  CLRF   x40
....................       } 
....................           
....................       if(RIGHT){ 
087A:  BSF    F92.2
087C:  BTFSC  F80.2
087E:  BRA    0892
....................          if(tright<120) 
0880:  MOVF   x43,F
0882:  BNZ   0890
0884:  MOVF   x42,W
0886:  SUBLW  77
0888:  BNC   0890
....................             tright++;    
088A:  INCF   x42,F
088C:  BTFSC  FD8.2
088E:  INCF   x43,F
....................       }else{ 
0890:  BRA    0896
....................          tright=0; 
0892:  CLRF   x43
0894:  CLRF   x42
....................       } 
....................        
....................       if(left){ 
0896:  BSF    F92.3
0898:  BTFSC  F80.3
089A:  BRA    08AE
....................          if(tleft<120) 
089C:  MOVF   x45,F
089E:  BNZ   08AC
08A0:  MOVF   x44,W
08A2:  SUBLW  77
08A4:  BNC   08AC
....................             tleft++; 
08A6:  INCF   x44,F
08A8:  BTFSC  FD8.2
08AA:  INCF   x45,F
....................       }else{ 
08AC:  BRA    08B2
....................          tleft=0; 
08AE:  CLRF   x45
08B0:  CLRF   x44
....................       } 
....................      
....................    if(tiempos>=200){//1s 
08B2:  MOVF   x3D,F
08B4:  BNZ   08BC
08B6:  MOVF   x3C,W
08B8:  SUBLW  C7
08BA:  BC    08E8
....................       tiempos=0; 
08BC:  CLRF   x3D
08BE:  CLRF   x3C
....................       if(!input_state(PIN_C2) && modo==2){ 
08C0:  BTFSC  F82.2
08C2:  BRA    08E8
08C4:  MOVF   x33,W
08C6:  SUBLW  02
08C8:  BNZ   08E8
....................          if(segundos>0){ 
08CA:  MOVF   x36,F
08CC:  BZ    08D2
....................             segundos--; 
08CE:  DECF   x36,F
....................          }else{ 
08D0:  BRA    08E8
....................             if(minutos>0){ 
08D2:  MOVF   x35,F
08D4:  BZ    08DE
....................                minutos--; 
08D6:  DECF   x35,F
....................                segundos=59; 
08D8:  MOVLW  3B
08DA:  MOVWF  x36
....................             }else{ 
08DC:  BRA    08E8
....................                tiempoCumplido=1; 
08DE:  BSF    1B.3
....................                minutos=minutosp; 
08E0:  MOVFF  437,435
....................                segundos=segundosp; 
08E4:  MOVFF  438,436
....................             } 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
....................  
08E8:  BCF    F9E.0
08EA:  MOVLB  0
08EC:  GOTO   0054
.................... void main() 
.................... { 
*
1474:  CLRF   FF8
1476:  BCF    FD0.7
1478:  BSF    07.7
147A:  CLRF   FEA
147C:  CLRF   FE9
147E:  BSF    1B.0
1480:  BCF    1B.1
1482:  BCF    1B.2
1484:  BCF    1B.3
1486:  BCF    1B.4
1488:  BCF    1B.5
148A:  MOVLB  4
148C:  CLRF   x30
148E:  CLRF   x31
1490:  CLRF   x32
1492:  CLRF   x33
1494:  CLRF   x34
1496:  CLRF   x35
1498:  CLRF   x36
149A:  CLRF   x37
149C:  CLRF   x38
149E:  CLRF   x39
14A0:  CLRF   x3B
14A2:  CLRF   x3A
14A4:  CLRF   x3D
14A6:  CLRF   x3C
14A8:  CLRF   x3F
14AA:  CLRF   x3E
14AC:  CLRF   x41
14AE:  CLRF   x40
14B0:  CLRF   x43
14B2:  CLRF   x42
14B4:  CLRF   x45
14B6:  CLRF   x44
14B8:  MOVF   FC1,W
14BA:  ANDLW  C0
14BC:  IORLW  0F
14BE:  MOVWF  FC1
14C0:  MOVLW  07
14C2:  MOVWF  FB4
14C4:  CLRF   1C
14C6:  CLRF   1D
14C8:  CLRF   1E
14CA:  CLRF   1F
14CC:  CLRF   20
14CE:  CLRF   21
14D0:  CLRF   22
14D2:  CLRF   23
14D4:  CLRF   24
14D6:  CLRF   25
14D8:  CLRF   26
14DA:  CLRF   27
14DC:  CLRF   28
14DE:  CLRF   29
14E0:  CLRF   2A
14E2:  CLRF   2B
14E4:  CLRF   2C
14E6:  CLRF   2D
14E8:  CLRF   2E
14EA:  CLRF   2F
14EC:  CLRF   30
14EE:  CLRF   31
14F0:  CLRF   32
14F2:  CLRF   33
14F4:  CLRF   34
14F6:  CLRF   35
14F8:  CLRF   36
14FA:  CLRF   37
14FC:  CLRF   38
14FE:  CLRF   39
1500:  CLRF   3A
1502:  CLRF   3B
1504:  CLRF   3C
1506:  CLRF   3D
1508:  CLRF   3E
150A:  CLRF   3F
150C:  CLRF   40
150E:  CLRF   41
1510:  CLRF   42
1512:  CLRF   43
1514:  CLRF   44
1516:  CLRF   45
1518:  CLRF   46
151A:  MOVLW  80
151C:  MOVWF  47
151E:  MOVLW  C0
1520:  MOVWF  48
1522:  MOVLW  E0
1524:  MOVWF  49
1526:  MOVWF  4A
1528:  MOVWF  4B
152A:  MOVWF  4C
152C:  MOVWF  4D
152E:  MOVLW  60
1530:  MOVWF  4E
1532:  CLRF   4F
1534:  MOVWF  50
1536:  MOVWF  51
1538:  MOVWF  52
153A:  MOVWF  53
153C:  MOVWF  54
153E:  MOVWF  55
1540:  MOVWF  56
1542:  MOVWF  57
1544:  MOVWF  58
1546:  MOVWF  59
1548:  MOVWF  5A
154A:  MOVWF  5B
154C:  MOVWF  5C
154E:  MOVWF  5D
1550:  MOVWF  5E
1552:  MOVWF  5F
1554:  MOVLB  0
1556:  MOVWF  x60
1558:  MOVWF  x61
155A:  MOVWF  x62
155C:  MOVWF  x63
155E:  MOVWF  x64
1560:  MOVWF  x65
1562:  MOVWF  x66
1564:  MOVWF  x67
1566:  MOVWF  x68
1568:  MOVLW  E0
156A:  MOVWF  x69
156C:  MOVWF  x6A
156E:  MOVWF  x6B
1570:  MOVWF  x6C
1572:  MOVWF  x6D
1574:  MOVWF  x6E
1576:  MOVLW  C0
1578:  MOVWF  x6F
157A:  MOVLW  80
157C:  MOVWF  x70
157E:  CLRF   x71
1580:  CLRF   x72
1582:  CLRF   x73
1584:  CLRF   x74
1586:  CLRF   x75
1588:  CLRF   x76
158A:  CLRF   x77
158C:  CLRF   x78
158E:  CLRF   x79
1590:  CLRF   x7A
1592:  CLRF   x7B
1594:  CLRF   x7C
1596:  CLRF   x7D
1598:  CLRF   x7E
159A:  CLRF   x7F
159C:  CLRF   x80
159E:  CLRF   x81
15A0:  CLRF   x82
15A2:  CLRF   x83
15A4:  CLRF   x84
15A6:  CLRF   x85
15A8:  CLRF   x86
15AA:  CLRF   x87
15AC:  CLRF   x88
15AE:  CLRF   x89
15B0:  CLRF   x8A
15B2:  CLRF   x8B
15B4:  CLRF   x8C
15B6:  CLRF   x8D
15B8:  CLRF   x8E
15BA:  CLRF   x8F
15BC:  CLRF   x90
15BE:  CLRF   x91
15C0:  CLRF   x92
15C2:  CLRF   x93
15C4:  CLRF   x94
15C6:  CLRF   x95
15C8:  CLRF   x96
15CA:  CLRF   x97
15CC:  CLRF   x98
15CE:  CLRF   x99
15D0:  CLRF   x9A
15D2:  CLRF   x9B
15D4:  CLRF   x9C
15D6:  CLRF   x9D
15D8:  CLRF   x9E
15DA:  CLRF   x9F
15DC:  CLRF   xA0
15DE:  CLRF   xA1
15E0:  CLRF   xA2
15E2:  CLRF   xA3
15E4:  CLRF   xA4
15E6:  CLRF   xA5
15E8:  CLRF   xA6
15EA:  CLRF   xA7
15EC:  CLRF   xA8
15EE:  CLRF   xA9
15F0:  CLRF   xAA
15F2:  CLRF   xAB
15F4:  CLRF   xAC
15F6:  CLRF   xAD
15F8:  CLRF   xAE
15FA:  CLRF   xAF
15FC:  CLRF   xB0
15FE:  CLRF   xB1
1600:  CLRF   xB2
1602:  CLRF   xB3
1604:  CLRF   xB4
1606:  CLRF   xB5
1608:  CLRF   xB6
160A:  CLRF   xB7
160C:  CLRF   xB8
160E:  CLRF   xB9
1610:  CLRF   xBA
1612:  CLRF   xBB
1614:  CLRF   xBC
1616:  CLRF   xBD
1618:  CLRF   xBE
161A:  CLRF   xBF
161C:  CLRF   xC0
161E:  CLRF   xC1
1620:  CLRF   xC2
1622:  CLRF   xC3
1624:  CLRF   xC4
1626:  CLRF   xC5
1628:  MOVLW  F0
162A:  MOVWF  xC6
162C:  MOVLW  FF
162E:  MOVWF  xC7
1630:  MOVWF  xC8
1632:  MOVWF  xC9
1634:  MOVWF  xCA
1636:  MOVWF  xCB
1638:  MOVLW  3F
163A:  MOVWF  xCC
163C:  MOVLW  03
163E:  MOVWF  xCD
1640:  CLRF   xCE
1642:  CLRF   xCF
1644:  CLRF   xD0
1646:  CLRF   xD1
1648:  CLRF   xD2
164A:  CLRF   xD3
164C:  CLRF   xD4
164E:  CLRF   xD5
1650:  CLRF   xD6
1652:  CLRF   xD7
1654:  CLRF   xD8
1656:  CLRF   xD9
1658:  CLRF   xDA
165A:  CLRF   xDB
165C:  CLRF   xDC
165E:  CLRF   xDD
1660:  CLRF   xDE
1662:  CLRF   xDF
1664:  CLRF   xE0
1666:  CLRF   xE1
1668:  CLRF   xE2
166A:  CLRF   xE3
166C:  CLRF   xE4
166E:  CLRF   xE5
1670:  MOVLW  80
1672:  MOVWF  xE6
1674:  MOVLW  C0
1676:  MOVWF  xE7
1678:  MOVLW  F0
167A:  MOVWF  xE8
167C:  MOVLW  FF
167E:  MOVWF  xE9
1680:  MOVWF  xEA
1682:  MOVWF  xEB
1684:  MOVWF  xEC
1686:  MOVWF  xED
1688:  MOVLW  7F
168A:  MOVWF  xEE
168C:  MOVLW  0F
168E:  MOVWF  xEF
1690:  MOVLW  01
1692:  MOVWF  xF0
1694:  CLRF   xF1
1696:  CLRF   xF2
1698:  CLRF   xF3
169A:  CLRF   xF4
169C:  CLRF   xF5
169E:  CLRF   xF6
16A0:  CLRF   xF7
16A2:  CLRF   xF8
16A4:  CLRF   xF9
16A6:  CLRF   xFA
16A8:  CLRF   xFB
16AA:  CLRF   xFC
16AC:  CLRF   xFD
16AE:  CLRF   xFE
16B0:  CLRF   xFF
16B2:  MOVLB  1
16B4:  CLRF   x00
16B6:  CLRF   x01
16B8:  CLRF   x02
16BA:  CLRF   x03
16BC:  CLRF   x04
16BE:  CLRF   x05
16C0:  CLRF   x06
16C2:  CLRF   x07
16C4:  CLRF   x08
16C6:  CLRF   x09
16C8:  CLRF   x0A
16CA:  CLRF   x0B
16CC:  CLRF   x0C
16CE:  CLRF   x0D
16D0:  CLRF   x0E
16D2:  CLRF   x0F
16D4:  CLRF   x10
16D6:  CLRF   x11
16D8:  CLRF   x12
16DA:  CLRF   x13
16DC:  CLRF   x14
16DE:  CLRF   x15
16E0:  CLRF   x16
16E2:  CLRF   x17
16E4:  CLRF   x18
16E6:  CLRF   x19
16E8:  CLRF   x1A
16EA:  CLRF   x1B
16EC:  CLRF   x1C
16EE:  CLRF   x1D
16F0:  CLRF   x1E
16F2:  CLRF   x1F
16F4:  CLRF   x20
16F6:  CLRF   x21
16F8:  CLRF   x22
16FA:  CLRF   x23
16FC:  CLRF   x24
16FE:  CLRF   x25
1700:  CLRF   x26
1702:  CLRF   x27
1704:  CLRF   x28
1706:  CLRF   x29
1708:  CLRF   x2A
170A:  CLRF   x2B
170C:  CLRF   x2C
170E:  CLRF   x2D
1710:  CLRF   x2E
1712:  CLRF   x2F
1714:  CLRF   x30
1716:  CLRF   x31
1718:  CLRF   x32
171A:  CLRF   x33
171C:  CLRF   x34
171E:  CLRF   x35
1720:  CLRF   x36
1722:  CLRF   x37
1724:  CLRF   x38
1726:  CLRF   x39
1728:  CLRF   x3A
172A:  CLRF   x3B
172C:  CLRF   x3C
172E:  CLRF   x3D
1730:  CLRF   x3E
1732:  CLRF   x3F
1734:  CLRF   x40
1736:  CLRF   x41
1738:  CLRF   x42
173A:  CLRF   x43
173C:  CLRF   x44
173E:  MOVLW  FC
1740:  MOVWF  x45
1742:  MOVLW  FF
1744:  MOVWF  x46
1746:  MOVWF  x47
1748:  MOVWF  x48
174A:  MOVLW  7F
174C:  MOVWF  x49
174E:  MOVLW  0F
1750:  MOVWF  x4A
1752:  MOVLW  01
1754:  MOVWF  x4B
1756:  CLRF   x4C
1758:  CLRF   x4D
175A:  MOVLW  E0
175C:  MOVWF  x4E
175E:  MOVLW  F8
1760:  MOVWF  x4F
1762:  MOVLW  FB
1764:  MOVWF  x50
1766:  MOVLW  1B
1768:  MOVWF  x51
176A:  MOVLW  E3
176C:  MOVWF  x52
176E:  MOVLW  E0
1770:  MOVWF  x53
1772:  MOVLW  E3
1774:  MOVWF  x54
1776:  MOVLW  63
1778:  MOVWF  x55
177A:  MOVWF  x56
177C:  MOVWF  x57
177E:  MOVWF  x58
1780:  MOVLW  E3
1782:  MOVWF  x59
1784:  MOVWF  x5A
1786:  MOVWF  x5B
1788:  MOVWF  x5C
178A:  MOVLW  83
178C:  MOVWF  x5D
178E:  MOVLW  C3
1790:  MOVWF  x5E
1792:  MOVLW  E3
1794:  MOVWF  x5F
1796:  MOVLW  63
1798:  MOVWF  x60
179A:  MOVWF  x61
179C:  MOVWF  x62
179E:  MOVWF  x63
17A0:  MOVWF  x64
17A2:  MOVLW  E3
17A4:  MOVWF  x65
17A6:  MOVWF  x66
17A8:  MOVWF  x67
17AA:  MOVLW  63
17AC:  MOVWF  x68
17AE:  MOVLW  83
17B0:  MOVWF  x69
17B2:  MOVLW  F3
17B4:  MOVWF  x6A
17B6:  MOVLW  FB
17B8:  MOVWF  x6B
17BA:  MOVLW  39
17BC:  MOVWF  x6C
17BE:  MOVLW  C1
17C0:  MOVWF  x6D
17C2:  MOVLW  E0
17C4:  MOVWF  x6E
17C6:  MOVWF  x6F
17C8:  MOVLW  60
17CA:  MOVWF  x70
17CC:  MOVWF  x71
17CE:  MOVWF  x72
17D0:  MOVWF  x73
17D2:  MOVWF  x74
17D4:  MOVLW  E0
17D6:  MOVWF  x75
17D8:  MOVWF  x76
17DA:  MOVWF  x77
17DC:  CLRF   x78
17DE:  MOVWF  x79
17E0:  MOVLW  F8
17E2:  MOVWF  x7A
17E4:  MOVWF  x7B
17E6:  MOVLW  78
17E8:  MOVWF  x7C
17EA:  MOVLW  60
17EC:  MOVWF  x7D
17EE:  MOVWF  x7E
17F0:  MOVWF  x7F
17F2:  MOVWF  x80
17F4:  MOVLW  E0
17F6:  MOVWF  x81
17F8:  MOVWF  x82
17FA:  MOVWF  x83
17FC:  CLRF   x84
17FE:  CLRF   x85
1800:  MOVLW  60
1802:  MOVWF  x86
1804:  MOVWF  x87
1806:  MOVWF  x88
1808:  MOVWF  x89
180A:  MOVWF  x8A
180C:  MOVWF  x8B
180E:  MOVWF  x8C
1810:  MOVLW  E0
1812:  MOVWF  x8D
1814:  MOVWF  x8E
1816:  MOVLW  C0
1818:  MOVWF  x8F
181A:  CLRF   x90
181C:  MOVLW  F0
181E:  MOVWF  x91
1820:  MOVLW  F8
1822:  MOVWF  x92
1824:  MOVLW  78
1826:  MOVWF  x93
1828:  MOVLW  08
182A:  MOVWF  x94
182C:  CLRF   x95
182E:  CLRF   x96
1830:  CLRF   x97
1832:  CLRF   x98
1834:  CLRF   x99
1836:  CLRF   x9A
1838:  CLRF   x9B
183A:  CLRF   x9C
183C:  CLRF   x9D
183E:  CLRF   x9E
1840:  CLRF   x9F
1842:  CLRF   xA0
1844:  CLRF   xA1
1846:  CLRF   xA2
1848:  MOVLW  04
184A:  MOVWF  xA3
184C:  MOVLW  1C
184E:  MOVWF  xA4
1850:  MOVWF  xA5
1852:  MOVWF  xA6
1854:  MOVWF  xA7
1856:  MOVWF  xA8
1858:  MOVWF  xA9
185A:  MOVWF  xAA
185C:  MOVWF  xAB
185E:  MOVWF  xAC
1860:  MOVWF  xAD
1862:  MOVWF  xAE
1864:  MOVWF  xAF
1866:  MOVWF  xB0
1868:  MOVWF  xB1
186A:  MOVWF  xB2
186C:  MOVWF  xB3
186E:  MOVLW  18
1870:  MOVWF  xB4
1872:  MOVWF  xB5
1874:  MOVWF  xB6
1876:  MOVWF  xB7
1878:  MOVWF  xB8
187A:  MOVWF  xB9
187C:  MOVWF  xBA
187E:  MOVWF  xBB
1880:  MOVWF  xBC
1882:  MOVWF  xBD
1884:  MOVWF  xBE
1886:  MOVWF  xBF
1888:  MOVWF  xC0
188A:  MOVWF  xC1
188C:  MOVWF  xC2
188E:  MOVLW  1C
1890:  MOVWF  xC3
1892:  MOVLW  1F
1894:  MOVWF  xC4
1896:  MOVWF  xC5
1898:  MOVWF  xC6
189A:  MOVLW  0F
189C:  MOVWF  xC7
189E:  MOVLW  03
18A0:  MOVWF  xC8
18A2:  CLRF   xC9
18A4:  CLRF   xCA
18A6:  CLRF   xCB
18A8:  MOVLW  10
18AA:  MOVWF  xCC
18AC:  MOVLW  1E
18AE:  MOVWF  xCD
18B0:  MOVLW  1F
18B2:  MOVWF  xCE
18B4:  MOVLW  07
18B6:  MOVWF  xCF
18B8:  MOVLW  18
18BA:  MOVWF  xD0
18BC:  MOVLW  1F
18BE:  MOVWF  xD1
18C0:  MOVWF  xD2
18C2:  MOVLW  07
18C4:  MOVWF  xD3
18C6:  CLRF   xD4
18C8:  CLRF   xD5
18CA:  CLRF   xD6
18CC:  CLRF   xD7
18CE:  MOVLW  18
18D0:  MOVWF  xD8
18D2:  MOVLW  1F
18D4:  MOVWF  xD9
18D6:  MOVWF  xDA
18D8:  MOVLW  07
18DA:  MOVWF  xDB
18DC:  MOVLW  18
18DE:  MOVWF  xDC
18E0:  MOVLW  1F
18E2:  MOVWF  xDD
18E4:  MOVWF  xDE
18E6:  MOVLW  1B
18E8:  MOVWF  xDF
18EA:  MOVLW  18
18EC:  MOVWF  xE0
18EE:  MOVWF  xE1
18F0:  MOVLW  98
18F2:  MOVWF  xE2
18F4:  MOVLW  F8
18F6:  MOVWF  xE3
18F8:  MOVWF  xE4
18FA:  MOVLW  7F
18FC:  MOVWF  xE5
18FE:  MOVLW  1F
1900:  MOVWF  xE6
1902:  MOVLW  03
1904:  MOVWF  xE7
1906:  MOVLW  1C
1908:  MOVWF  xE8
190A:  MOVLW  1F
190C:  MOVWF  xE9
190E:  MOVWF  xEA
1910:  MOVLW  01
1912:  MOVWF  xEB
1914:  MOVLW  1E
1916:  MOVWF  xEC
1918:  MOVLW  1F
191A:  MOVWF  xED
191C:  MOVWF  xEE
191E:  MOVLW  19
1920:  MOVWF  xEF
1922:  MOVLW  18
1924:  MOVWF  xF0
1926:  MOVWF  xF1
1928:  MOVWF  xF2
192A:  MOVWF  xF3
192C:  MOVLW  1E
192E:  MOVWF  xF4
1930:  MOVLW  1F
1932:  MOVWF  xF5
1934:  MOVLW  0F
1936:  MOVWF  xF6
1938:  MOVLW  11
193A:  MOVWF  xF7
193C:  MOVLW  1E
193E:  MOVWF  xF8
1940:  MOVLW  1F
1942:  MOVWF  xF9
1944:  MOVWF  xFA
1946:  MOVLW  18
1948:  MOVWF  xFB
194A:  MOVWF  xFC
194C:  MOVWF  xFD
194E:  MOVWF  xFE
1950:  MOVWF  xFF
1952:  MOVLW  1E
1954:  MOVLB  2
1956:  MOVWF  x00
1958:  MOVLW  1F
195A:  MOVWF  x01
195C:  MOVLW  07
195E:  MOVWF  x02
1960:  MOVLW  08
1962:  MOVWF  x03
1964:  MOVLW  1E
1966:  MOVWF  x04
1968:  MOVLW  1F
196A:  MOVWF  x05
196C:  MOVWF  x06
196E:  MOVLW  1B
1970:  MOVWF  x07
1972:  MOVWF  x08
1974:  MOVWF  x09
1976:  MOVWF  x0A
1978:  MOVWF  x0B
197A:  MOVLW  1F
197C:  MOVWF  x0C
197E:  MOVWF  x0D
1980:  MOVLW  07
1982:  MOVWF  x0E
1984:  MOVLW  18
1986:  MOVWF  x0F
1988:  MOVLW  1F
198A:  MOVWF  x10
198C:  MOVWF  x11
198E:  MOVLW  03
1990:  MOVWF  x12
1992:  CLRF   x13
1994:  CLRF   x14
1996:  CLRF   x15
1998:  CLRF   x16
199A:  CLRF   x17
199C:  CLRF   x18
199E:  CLRF   x19
19A0:  CLRF   x1A
19A2:  CLRF   x1B
19A4:  CLRF   x1C
19A6:  CLRF   x1D
19A8:  CLRF   x1E
19AA:  CLRF   x1F
19AC:  CLRF   x20
19AE:  CLRF   x21
19B0:  CLRF   x22
19B2:  CLRF   x23
19B4:  CLRF   x24
19B6:  CLRF   x25
19B8:  CLRF   x26
19BA:  CLRF   x27
19BC:  CLRF   x28
19BE:  CLRF   x29
19C0:  CLRF   x2A
19C2:  CLRF   x2B
19C4:  CLRF   x2C
19C6:  CLRF   x2D
19C8:  CLRF   x2E
19CA:  CLRF   x2F
19CC:  CLRF   x30
19CE:  CLRF   x31
19D0:  CLRF   x32
19D2:  CLRF   x33
19D4:  CLRF   x34
19D6:  CLRF   x35
19D8:  CLRF   x36
19DA:  CLRF   x37
19DC:  CLRF   x38
19DE:  CLRF   x39
19E0:  CLRF   x3A
19E2:  CLRF   x3B
19E4:  CLRF   x3C
19E6:  CLRF   x3D
19E8:  CLRF   x3E
19EA:  CLRF   x3F
19EC:  CLRF   x40
19EE:  CLRF   x41
19F0:  CLRF   x42
19F2:  CLRF   x43
19F4:  CLRF   x44
19F6:  CLRF   x45
19F8:  CLRF   x46
19FA:  CLRF   x47
19FC:  CLRF   x48
19FE:  CLRF   x49
1A00:  CLRF   x4A
1A02:  CLRF   x4B
1A04:  CLRF   x4C
1A06:  CLRF   x4D
1A08:  CLRF   x4E
1A0A:  CLRF   x4F
1A0C:  CLRF   x50
1A0E:  CLRF   x51
1A10:  CLRF   x52
1A12:  CLRF   x53
1A14:  CLRF   x54
1A16:  CLRF   x55
1A18:  CLRF   x56
1A1A:  CLRF   x57
1A1C:  CLRF   x58
1A1E:  CLRF   x59
1A20:  CLRF   x5A
1A22:  CLRF   x5B
1A24:  CLRF   x5C
1A26:  CLRF   x5D
1A28:  CLRF   x5E
1A2A:  CLRF   x5F
1A2C:  CLRF   x60
1A2E:  CLRF   x61
1A30:  CLRF   x62
1A32:  CLRF   x63
1A34:  CLRF   x64
1A36:  CLRF   x65
1A38:  CLRF   x66
1A3A:  CLRF   x67
1A3C:  CLRF   x68
1A3E:  CLRF   x69
1A40:  CLRF   x6A
1A42:  CLRF   x6B
1A44:  CLRF   x6C
1A46:  CLRF   x6D
1A48:  CLRF   x6E
1A4A:  CLRF   x6F
1A4C:  CLRF   x70
1A4E:  CLRF   x71
1A50:  CLRF   x72
1A52:  CLRF   x73
1A54:  CLRF   x74
1A56:  CLRF   x75
1A58:  CLRF   x76
1A5A:  CLRF   x77
1A5C:  CLRF   x78
1A5E:  CLRF   x79
1A60:  CLRF   x7A
1A62:  CLRF   x7B
1A64:  CLRF   x7C
1A66:  CLRF   x7D
1A68:  CLRF   x7E
1A6A:  CLRF   x7F
1A6C:  CLRF   x80
1A6E:  CLRF   x81
1A70:  CLRF   x82
1A72:  CLRF   x83
1A74:  CLRF   x84
1A76:  CLRF   x85
1A78:  CLRF   x86
1A7A:  CLRF   x87
1A7C:  CLRF   x88
1A7E:  CLRF   x89
1A80:  CLRF   x8A
1A82:  CLRF   x8B
1A84:  CLRF   x8C
1A86:  CLRF   x8D
1A88:  CLRF   x8E
1A8A:  CLRF   x8F
1A8C:  CLRF   x90
1A8E:  CLRF   x91
1A90:  CLRF   x92
1A92:  CLRF   x93
1A94:  CLRF   x94
1A96:  CLRF   x95
1A98:  CLRF   x96
1A9A:  CLRF   x97
1A9C:  CLRF   x98
1A9E:  CLRF   x99
1AA0:  CLRF   x9A
1AA2:  CLRF   x9B
1AA4:  CLRF   x9C
1AA6:  CLRF   x9D
1AA8:  CLRF   x9E
1AAA:  CLRF   x9F
1AAC:  CLRF   xA0
1AAE:  CLRF   xA1
1AB0:  CLRF   xA2
1AB2:  CLRF   xA3
1AB4:  CLRF   xA4
1AB6:  CLRF   xA5
1AB8:  CLRF   xA6
1ABA:  CLRF   xA7
1ABC:  CLRF   xA8
1ABE:  CLRF   xA9
1AC0:  CLRF   xAA
1AC2:  CLRF   xAB
1AC4:  CLRF   xAC
1AC6:  CLRF   xAD
1AC8:  CLRF   xAE
1ACA:  CLRF   xAF
1ACC:  CLRF   xB0
1ACE:  CLRF   xB1
1AD0:  CLRF   xB2
1AD2:  CLRF   xB3
1AD4:  CLRF   xB4
1AD6:  CLRF   xB5
1AD8:  CLRF   xB6
1ADA:  CLRF   xB7
1ADC:  CLRF   xB8
1ADE:  CLRF   xB9
1AE0:  CLRF   xBA
1AE2:  CLRF   xBB
1AE4:  CLRF   xBC
1AE6:  CLRF   xBD
1AE8:  CLRF   xBE
1AEA:  CLRF   xBF
1AEC:  CLRF   xC0
1AEE:  CLRF   xC1
1AF0:  CLRF   xC2
1AF2:  CLRF   xC3
1AF4:  CLRF   xC4
1AF6:  CLRF   xC5
1AF8:  CLRF   xC6
1AFA:  CLRF   xC7
1AFC:  CLRF   xC8
1AFE:  CLRF   xC9
1B00:  CLRF   xCA
1B02:  CLRF   xCB
1B04:  CLRF   xCC
1B06:  CLRF   xCD
1B08:  CLRF   xCE
1B0A:  CLRF   xCF
1B0C:  CLRF   xD0
1B0E:  CLRF   xD1
1B10:  CLRF   xD2
1B12:  CLRF   xD3
1B14:  CLRF   xD4
1B16:  CLRF   xD5
1B18:  CLRF   xD6
1B1A:  CLRF   xD7
1B1C:  CLRF   xD8
1B1E:  CLRF   xD9
1B20:  CLRF   xDA
1B22:  CLRF   xDB
1B24:  CLRF   xDC
1B26:  CLRF   xDD
1B28:  CLRF   xDE
1B2A:  CLRF   xDF
1B2C:  CLRF   xE0
1B2E:  CLRF   xE1
1B30:  CLRF   xE2
1B32:  CLRF   xE3
1B34:  CLRF   xE4
1B36:  CLRF   xE5
1B38:  CLRF   xE6
1B3A:  CLRF   xE7
1B3C:  CLRF   xE8
1B3E:  CLRF   xE9
1B40:  CLRF   xEA
1B42:  CLRF   xEB
1B44:  CLRF   xEC
1B46:  CLRF   xED
1B48:  CLRF   xEE
1B4A:  CLRF   xEF
1B4C:  CLRF   xF0
1B4E:  CLRF   xF1
1B50:  CLRF   xF2
1B52:  CLRF   xF3
1B54:  CLRF   xF4
1B56:  CLRF   xF5
1B58:  CLRF   xF6
1B5A:  CLRF   xF7
1B5C:  CLRF   xF8
1B5E:  CLRF   xF9
1B60:  CLRF   xFA
1B62:  CLRF   xFB
1B64:  CLRF   xFC
1B66:  CLRF   xFD
1B68:  CLRF   xFE
1B6A:  CLRF   xFF
1B6C:  MOVLB  3
1B6E:  CLRF   x00
1B70:  CLRF   x01
1B72:  CLRF   x02
1B74:  CLRF   x03
1B76:  CLRF   x04
1B78:  CLRF   x05
1B7A:  CLRF   x06
1B7C:  CLRF   x07
1B7E:  CLRF   x08
1B80:  CLRF   x09
1B82:  CLRF   x0A
1B84:  CLRF   x0B
1B86:  CLRF   x0C
1B88:  CLRF   x0D
1B8A:  CLRF   x0E
1B8C:  CLRF   x0F
1B8E:  CLRF   x10
1B90:  CLRF   x11
1B92:  CLRF   x12
1B94:  CLRF   x13
1B96:  CLRF   x14
1B98:  CLRF   x15
1B9A:  CLRF   x16
1B9C:  CLRF   x17
1B9E:  CLRF   x18
1BA0:  CLRF   x19
1BA2:  CLRF   x1A
1BA4:  CLRF   x1B
1BA6:  CLRF   x1C
1BA8:  CLRF   x1D
1BAA:  CLRF   x1E
1BAC:  CLRF   x1F
1BAE:  CLRF   x20
1BB0:  CLRF   x21
1BB2:  CLRF   x22
1BB4:  CLRF   x23
1BB6:  CLRF   x24
1BB8:  CLRF   x25
1BBA:  CLRF   x26
1BBC:  CLRF   x27
1BBE:  CLRF   x28
1BC0:  CLRF   x29
1BC2:  CLRF   x2A
1BC4:  CLRF   x2B
1BC6:  CLRF   x2C
1BC8:  CLRF   x2D
1BCA:  CLRF   x2E
1BCC:  CLRF   x2F
1BCE:  CLRF   x30
1BD0:  CLRF   x31
1BD2:  CLRF   x32
1BD4:  CLRF   x33
1BD6:  CLRF   x34
1BD8:  CLRF   x35
1BDA:  CLRF   x36
1BDC:  CLRF   x37
1BDE:  CLRF   x38
1BE0:  CLRF   x39
1BE2:  CLRF   x3A
1BE4:  CLRF   x3B
1BE6:  CLRF   x3C
1BE8:  CLRF   x3D
1BEA:  CLRF   x3E
1BEC:  CLRF   x3F
1BEE:  CLRF   x40
1BF0:  CLRF   x41
1BF2:  CLRF   x42
1BF4:  CLRF   x43
1BF6:  CLRF   x44
1BF8:  CLRF   x45
1BFA:  CLRF   x46
1BFC:  CLRF   x47
1BFE:  CLRF   x48
1C00:  CLRF   x49
1C02:  CLRF   x4A
1C04:  CLRF   x4B
1C06:  CLRF   x4C
1C08:  CLRF   x4D
1C0A:  CLRF   x4E
1C0C:  CLRF   x4F
1C0E:  CLRF   x50
1C10:  CLRF   x51
1C12:  CLRF   x52
1C14:  CLRF   x53
1C16:  CLRF   x54
1C18:  CLRF   x55
1C1A:  CLRF   x56
1C1C:  CLRF   x57
1C1E:  CLRF   x58
1C20:  CLRF   x59
1C22:  CLRF   x5A
1C24:  CLRF   x5B
1C26:  CLRF   x5C
1C28:  CLRF   x5D
1C2A:  CLRF   x5E
1C2C:  CLRF   x5F
1C2E:  CLRF   x60
1C30:  CLRF   x61
1C32:  CLRF   x62
1C34:  CLRF   x63
1C36:  CLRF   x64
1C38:  CLRF   x65
1C3A:  CLRF   x66
1C3C:  CLRF   x67
1C3E:  CLRF   x68
1C40:  CLRF   x69
1C42:  CLRF   x6A
1C44:  CLRF   x6B
1C46:  CLRF   x6C
1C48:  CLRF   x6D
1C4A:  CLRF   x6E
1C4C:  CLRF   x6F
1C4E:  CLRF   x70
1C50:  CLRF   x71
1C52:  CLRF   x72
1C54:  CLRF   x73
1C56:  CLRF   x74
1C58:  CLRF   x75
1C5A:  CLRF   x76
1C5C:  CLRF   x77
1C5E:  CLRF   x78
1C60:  CLRF   x79
1C62:  CLRF   x7A
1C64:  CLRF   x7B
1C66:  CLRF   x7C
1C68:  CLRF   x7D
1C6A:  CLRF   x7E
1C6C:  CLRF   x7F
1C6E:  CLRF   x80
1C70:  CLRF   x81
1C72:  CLRF   x82
1C74:  CLRF   x83
1C76:  CLRF   x84
1C78:  CLRF   x85
1C7A:  CLRF   x86
1C7C:  CLRF   x87
1C7E:  CLRF   x88
1C80:  CLRF   x89
1C82:  CLRF   x8A
1C84:  CLRF   x8B
1C86:  CLRF   x8C
1C88:  CLRF   x8D
1C8A:  CLRF   x8E
1C8C:  CLRF   x8F
1C8E:  CLRF   x90
1C90:  CLRF   x91
1C92:  CLRF   x92
1C94:  CLRF   x93
1C96:  CLRF   x94
1C98:  CLRF   x95
1C9A:  CLRF   x96
1C9C:  CLRF   x97
1C9E:  CLRF   x98
1CA0:  CLRF   x99
1CA2:  CLRF   x9A
1CA4:  CLRF   x9B
1CA6:  CLRF   x9C
1CA8:  CLRF   x9D
1CAA:  CLRF   x9E
1CAC:  CLRF   x9F
1CAE:  CLRF   xA0
1CB0:  CLRF   xA1
1CB2:  CLRF   xA2
1CB4:  CLRF   xA3
1CB6:  CLRF   xA4
1CB8:  CLRF   xA5
1CBA:  CLRF   xA6
1CBC:  CLRF   xA7
1CBE:  CLRF   xA8
1CC0:  CLRF   xA9
1CC2:  CLRF   xAA
1CC4:  CLRF   xAB
1CC6:  CLRF   xAC
1CC8:  CLRF   xAD
1CCA:  CLRF   xAE
1CCC:  CLRF   xAF
1CCE:  CLRF   xB0
1CD0:  CLRF   xB1
1CD2:  CLRF   xB2
1CD4:  CLRF   xB3
1CD6:  CLRF   xB4
1CD8:  CLRF   xB5
1CDA:  CLRF   xB6
1CDC:  CLRF   xB7
1CDE:  CLRF   xB8
1CE0:  CLRF   xB9
1CE2:  CLRF   xBA
1CE4:  CLRF   xBB
1CE6:  CLRF   xBC
1CE8:  CLRF   xBD
1CEA:  CLRF   xBE
1CEC:  CLRF   xBF
1CEE:  CLRF   xC0
1CF0:  CLRF   xC1
1CF2:  CLRF   xC2
1CF4:  CLRF   xC3
1CF6:  CLRF   xC4
1CF8:  CLRF   xC5
1CFA:  CLRF   xC6
1CFC:  CLRF   xC7
1CFE:  CLRF   xC8
1D00:  CLRF   xC9
1D02:  CLRF   xCA
1D04:  CLRF   xCB
1D06:  CLRF   xCC
1D08:  CLRF   xCD
1D0A:  CLRF   xCE
1D0C:  CLRF   xCF
1D0E:  CLRF   xD0
1D10:  CLRF   xD1
1D12:  CLRF   xD2
1D14:  CLRF   xD3
1D16:  CLRF   xD4
1D18:  CLRF   xD5
1D1A:  CLRF   xD6
1D1C:  CLRF   xD7
1D1E:  CLRF   xD8
1D20:  CLRF   xD9
1D22:  CLRF   xDA
1D24:  CLRF   xDB
1D26:  CLRF   xDC
1D28:  CLRF   xDD
1D2A:  CLRF   xDE
1D2C:  CLRF   xDF
1D2E:  CLRF   xE0
1D30:  CLRF   xE1
1D32:  CLRF   xE2
1D34:  CLRF   xE3
1D36:  CLRF   xE4
1D38:  CLRF   xE5
1D3A:  CLRF   xE6
1D3C:  CLRF   xE7
1D3E:  CLRF   xE8
1D40:  CLRF   xE9
1D42:  CLRF   xEA
1D44:  CLRF   xEB
1D46:  CLRF   xEC
1D48:  CLRF   xED
1D4A:  CLRF   xEE
1D4C:  CLRF   xEF
1D4E:  CLRF   xF0
1D50:  CLRF   xF1
1D52:  CLRF   xF2
1D54:  CLRF   xF3
1D56:  CLRF   xF4
1D58:  CLRF   xF5
1D5A:  CLRF   xF6
1D5C:  CLRF   xF7
1D5E:  CLRF   xF8
1D60:  CLRF   xF9
1D62:  CLRF   xFA
1D64:  CLRF   xFB
1D66:  CLRF   xFC
1D68:  CLRF   xFD
1D6A:  CLRF   xFE
1D6C:  CLRF   xFF
1D6E:  MOVLB  4
1D70:  CLRF   x00
1D72:  CLRF   x01
1D74:  CLRF   x02
1D76:  CLRF   x03
1D78:  CLRF   x04
1D7A:  CLRF   x05
1D7C:  CLRF   x06
1D7E:  CLRF   x07
1D80:  CLRF   x08
1D82:  CLRF   x09
1D84:  CLRF   x0A
1D86:  CLRF   x0B
1D88:  CLRF   x0C
1D8A:  CLRF   x0D
1D8C:  CLRF   x0E
1D8E:  CLRF   x0F
1D90:  CLRF   x10
1D92:  CLRF   x11
1D94:  CLRF   x12
1D96:  CLRF   x13
1D98:  CLRF   x14
1D9A:  CLRF   x15
1D9C:  CLRF   x16
1D9E:  CLRF   x17
1DA0:  CLRF   x18
1DA2:  CLRF   x19
1DA4:  CLRF   x1A
1DA6:  CLRF   x1B
1DA8:  CLRF   x4F
1DAA:  CLRF   x50
....................    LuzUV_off; 
1DAC:  BSF    F8B.2
1DAE:  BCF    F94.2
....................    set_tris_a(0x0f); 
1DB0:  MOVLW  0F
1DB2:  MOVWF  F92
....................    output_bit(PIN_A4,0); 
1DB4:  BCF    F89.4
1DB6:  BCF    F92.4
....................    output_bit(PIN_A5,0); 
1DB8:  BCF    F89.5
1DBA:  BCF    F92.5
....................    output_bit(PIN_C6,0); 
1DBC:  BCF    F8B.6
1DBE:  BCF    F94.6
....................    output_bit(PIN_C7,0); 
1DC0:  BCF    F8B.7
1DC2:  BCF    F94.7
....................    output_bit(PIN_B0,0); 
1DC4:  BCF    F8A.0
1DC6:  BCF    F93.0
....................    output_bit(PIN_B1,0); 
1DC8:  BCF    F8A.1
1DCA:  BCF    F93.1
....................    output_bit(PIN_B2,0); 
1DCC:  BCF    F8A.2
1DCE:  BCF    F93.2
....................    output_bit(PIN_B3,0); 
1DD0:  BCF    F8A.3
1DD2:  BCF    F93.3
....................    output_bit(PIN_B4,0); 
1DD4:  BCF    F8A.4
1DD6:  BCF    F93.4
....................    output_bit(PIN_B5,0); 
1DD8:  BCF    F8A.5
1DDA:  BCF    F93.5
....................    output_bit(PIN_B6,0); 
1DDC:  BCF    F8A.6
1DDE:  BCF    F93.6
....................    output_bit(PIN_B7,0); 
1DE0:  BCF    F8A.7
1DE2:  BCF    F93.7
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1);    
1DE4:  MOVLW  85
1DE6:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
1DE8:  BSF    F9D.0
....................    enable_interrupts(global);    
1DEA:  MOVLW  C0
1DEC:  IORWF  FF2,F
....................    segundosp=read_eeprom(0); 
1DEE:  MOVFF  FF2,451
1DF2:  BCF    FF2.7
1DF4:  CLRF   FA9
1DF6:  BCF    FA6.6
1DF8:  BCF    FA6.7
1DFA:  BSF    FA6.0
1DFC:  MOVF   FA8,W
1DFE:  BTFSC  x51.7
1E00:  BSF    FF2.7
1E02:  MOVWF  x38
....................    delay_ms(5); 
1E04:  MOVLW  05
1E06:  MOVWF  x52
1E08:  MOVLB  0
1E0A:  CALL   08F0
....................    minutosp=read_eeprom(1); 
1E0E:  MOVFF  FF2,451
1E12:  BCF    FF2.7
1E14:  MOVLW  01
1E16:  MOVWF  FA9
1E18:  BCF    FA6.6
1E1A:  BCF    FA6.7
1E1C:  BSF    FA6.0
1E1E:  MOVF   FA8,W
1E20:  MOVLB  4
1E22:  BTFSC  x51.7
1E24:  BSF    FF2.7
1E26:  MOVWF  x37
....................    delay_ms(5); 
1E28:  MOVLW  05
1E2A:  MOVWF  x52
1E2C:  MOVLB  0
1E2E:  CALL   08F0
....................    if(segundosp>59){ 
1E32:  MOVLB  4
1E34:  MOVF   x38,W
1E36:  SUBLW  3B
1E38:  BC    1E70
....................       segundosp=0; 
1E3A:  CLRF   x38
....................       write_eeprom(0,0); 
1E3C:  CLRF   FA9
1E3E:  CLRF   FA8
1E40:  BCF    FA6.6
1E42:  BCF    FA6.7
1E44:  BSF    FA6.2
1E46:  MOVF   FF2,W
1E48:  MOVWF  00
1E4A:  BCF    FF2.7
1E4C:  MOVLB  F
1E4E:  MOVLW  55
1E50:  MOVWF  FA7
1E52:  MOVLW  AA
1E54:  MOVWF  FA7
1E56:  BSF    FA6.1
1E58:  BTFSC  FA6.1
1E5A:  BRA    1E58
1E5C:  BCF    FA6.2
1E5E:  MOVF   00,W
1E60:  IORWF  FF2,F
....................       delay_ms(5); 
1E62:  MOVLW  05
1E64:  MOVLB  4
1E66:  MOVWF  x52
1E68:  MOVLB  0
1E6A:  CALL   08F0
1E6E:  MOVLB  4
....................    } 
....................    if(minutosp>90){ 
1E70:  MOVF   x37,W
1E72:  SUBLW  5A
1E74:  BC    1EB2
....................       minutosp=5; 
1E76:  MOVLW  05
1E78:  MOVWF  x37
....................       write_eeprom(1,5); 
1E7A:  MOVLW  01
1E7C:  MOVWF  FA9
1E7E:  MOVLW  05
1E80:  MOVWF  FA8
1E82:  BCF    FA6.6
1E84:  BCF    FA6.7
1E86:  BSF    FA6.2
1E88:  MOVF   FF2,W
1E8A:  MOVWF  00
1E8C:  BCF    FF2.7
1E8E:  MOVLB  F
1E90:  MOVLW  55
1E92:  MOVWF  FA7
1E94:  MOVLW  AA
1E96:  MOVWF  FA7
1E98:  BSF    FA6.1
1E9A:  BTFSC  FA6.1
1E9C:  BRA    1E9A
1E9E:  BCF    FA6.2
1EA0:  MOVF   00,W
1EA2:  IORWF  FF2,F
....................       delay_ms(5); 
1EA4:  MOVLW  05
1EA6:  MOVLB  4
1EA8:  MOVWF  x52
1EAA:  MOVLB  0
1EAC:  CALL   08F0
1EB0:  MOVLB  4
....................    } 
....................    segundos=segundosp; 
1EB2:  MOVFF  438,436
....................    minutos=minutosp; 
1EB6:  MOVFF  437,435
....................    SSD1306_Begin(SSD1306_SWITCHCAPVCC, SSD1306_I2C_ADDRESS); 
1EBA:  MOVLW  02
1EBC:  MOVWF  x51
1EBE:  MOVLW  78
1EC0:  MOVWF  x52
1EC2:  MOVLB  0
1EC4:  CALL   09AA
....................    strcpy(Menus.Letra,"Lampara UV"); 
1EC8:  MOVLW  04
1ECA:  MOVWF  FEA
1ECC:  MOVLW  1C
1ECE:  MOVWF  FE9
1ED0:  MOVFF  FF2,451
1ED4:  BCF    FF2.7
1ED6:  MOVLW  00
1ED8:  CALL   06BE
1EDC:  TBLRD*-
1EDE:  TBLRD*+
1EE0:  MOVF   FF5,W
1EE2:  MOVWF  FEE
1EE4:  IORLW  00
1EE6:  BNZ   1EDE
1EE8:  MOVLB  4
1EEA:  BTFSC  x51.7
1EEC:  BSF    FF2.7
....................    SSD1306_DrawText(20,40,Menus.Letra,1); 
1EEE:  MOVLW  14
1EF0:  MOVWF  x51
1EF2:  MOVLW  28
1EF4:  MOVWF  x52
1EF6:  MOVLW  04
1EF8:  MOVWF  x54
1EFA:  MOVLW  1C
1EFC:  MOVWF  x53
1EFE:  MOVLW  01
1F00:  MOVWF  x55
1F02:  MOVLB  0
1F04:  CALL   1054
....................    strcpy(Menus.Letra,"Portatil"); 
1F08:  MOVLW  04
1F0A:  MOVWF  FEA
1F0C:  MOVLW  1C
1F0E:  MOVWF  FE9
1F10:  MOVFF  FF2,451
1F14:  BCF    FF2.7
1F16:  MOVLW  00
1F18:  CALL   06E4
1F1C:  TBLRD*-
1F1E:  TBLRD*+
1F20:  MOVF   FF5,W
1F22:  MOVWF  FEE
1F24:  IORLW  00
1F26:  BNZ   1F1E
1F28:  MOVLB  4
1F2A:  BTFSC  x51.7
1F2C:  BSF    FF2.7
....................    SSD1306_DrawText(30,50,Menus.Letra,1); 
1F2E:  MOVLW  1E
1F30:  MOVWF  x51
1F32:  MOVLW  32
1F34:  MOVWF  x52
1F36:  MOVLW  04
1F38:  MOVWF  x54
1F3A:  MOVLW  1C
1F3C:  MOVWF  x53
1F3E:  MOVLW  01
1F40:  MOVWF  x55
1F42:  MOVLB  0
1F44:  CALL   1054
....................    SSD1306_Display(); 
1F48:  CALL   109E
....................    delay_ms(2000); 
1F4C:  MOVLW  08
1F4E:  MOVLB  4
1F50:  MOVWF  x51
1F52:  MOVLW  FA
1F54:  MOVWF  x52
1F56:  MOVLB  0
1F58:  CALL   08F0
1F5C:  MOVLB  4
1F5E:  DECFSZ x51,F
1F60:  BRA    1F52
....................    SSD1306_ClearDisplay();  
1F62:  MOVLB  0
1F64:  CALL   119E
....................    SSD1306_Display(); 
1F68:  CALL   109E
....................    flagModo=ON; 
1F6C:  BSF    1B.2
....................    menu=0; 
1F6E:  MOVLB  4
1F70:  CLRF   x32
....................    
....................    while (1){ 
....................       SSD1306_Display(); 
1F72:  MOVLB  0
1F74:  CALL   109E
....................       if(menu==0){// Menu de funcionamiento principal 
1F78:  MOVLB  4
1F7A:  MOVF   x32,F
1F7C:  BTFSS  FD8.2
1F7E:  BRA    246E
....................          dibujaImagen(1);//Bombillo  
1F80:  MOVLW  01
1F82:  MOVWF  x51
1F84:  MOVLB  0
1F86:  GOTO   11E8
....................          if(!input_state(PIN_C2)){ 
1F8A:  BTFSC  F82.2
1F8C:  BRA    1FDA
....................             SSD1306_InvertDisplay(1); 
1F8E:  MOVLW  01
1F90:  MOVLB  4
1F92:  MOVWF  x51
1F94:  MOVLB  0
1F96:  CALL   129A
....................             strcpy(Menus.Letra,"ON "); 
1F9A:  MOVLW  04
1F9C:  MOVWF  FEA
1F9E:  MOVLW  1C
1FA0:  MOVWF  FE9
1FA2:  MOVFF  FF2,451
1FA6:  BCF    FF2.7
1FA8:  MOVLW  00
1FAA:  CALL   0708
1FAE:  TBLRD*-
1FB0:  TBLRD*+
1FB2:  MOVF   FF5,W
1FB4:  MOVWF  FEE
1FB6:  IORLW  00
1FB8:  BNZ   1FB0
1FBA:  MOVLB  4
1FBC:  BTFSC  x51.7
1FBE:  BSF    FF2.7
....................             SSD1306_DrawText(0,50,Menus.Letra,2); 
1FC0:  CLRF   x51
1FC2:  MOVLW  32
1FC4:  MOVWF  x52
1FC6:  MOVLW  04
1FC8:  MOVWF  x54
1FCA:  MOVLW  1C
1FCC:  MOVWF  x53
1FCE:  MOVLW  02
1FD0:  MOVWF  x55
1FD2:  MOVLB  0
1FD4:  CALL   1054
....................          }else{ 
1FD8:  BRA    2022
....................             SSD1306_InvertDisplay(0); 
1FDA:  MOVLB  4
1FDC:  CLRF   x51
1FDE:  MOVLB  0
1FE0:  CALL   129A
....................             strcpy(Menus.Letra,"OFF"); 
1FE4:  MOVLW  04
1FE6:  MOVWF  FEA
1FE8:  MOVLW  1C
1FEA:  MOVWF  FE9
1FEC:  MOVFF  FF2,451
1FF0:  BCF    FF2.7
1FF2:  MOVLW  00
1FF4:  CALL   0726
1FF8:  TBLRD*-
1FFA:  TBLRD*+
1FFC:  MOVF   FF5,W
1FFE:  MOVWF  FEE
2000:  IORLW  00
2002:  BNZ   1FFA
2004:  MOVLB  4
2006:  BTFSC  x51.7
2008:  BSF    FF2.7
....................             SSD1306_DrawText(0,50,Menus.Letra,2); 
200A:  CLRF   x51
200C:  MOVLW  32
200E:  MOVWF  x52
2010:  MOVLW  04
2012:  MOVWF  x54
2014:  MOVLW  1C
2016:  MOVWF  x53
2018:  MOVLW  02
201A:  MOVWF  x55
201C:  MOVLB  0
201E:  CALL   1054
....................          } 
....................           
....................          if(UP && DOWN){ 
2022:  BSF    F92.0
2024:  BTFSC  F80.0
2026:  BRA    204E
2028:  BSF    F92.1
202A:  BTFSC  F80.1
202C:  BRA    204E
....................             delay_ms(50); 
202E:  MOVLW  32
2030:  MOVLB  4
2032:  MOVWF  x52
2034:  MOVLB  0
2036:  CALL   08F0
....................             if(UP && DOWN){    
203A:  BSF    F92.0
203C:  BTFSC  F80.0
203E:  BRA    204E
2040:  BSF    F92.1
2042:  BTFSC  F80.1
2044:  BRA    204E
....................                modo++; 
2046:  MOVLB  4
2048:  INCF   x33,F
....................                flagModo=OFF; 
204A:  BCF    1B.2
204C:  MOVLB  0
....................             } 
....................          } 
....................          if(modo>2) 
204E:  MOVLB  4
2050:  MOVF   x33,W
2052:  SUBLW  02
2054:  BC    2058
....................             modo=0; 
2056:  CLRF   x33
....................           
....................          if(modo==0){//modo Push 
2058:  MOVF   x33,F
205A:  BTFSS  FD8.2
205C:  BRA    2176
....................             if(!flagModo){ 
205E:  BTFSC  1B.2
2060:  BRA    211C
....................                flagModo=ON; 
2062:  BSF    1B.2
....................                SSD1306_ClearDisplay();  
2064:  MOVLB  0
2066:  CALL   119E
....................                SSD1306_Display(); 
206A:  CALL   109E
....................                SSD1306_InvertDisplay(1); 
206E:  MOVLW  01
2070:  MOVLB  4
2072:  MOVWF  x51
2074:  MOVLB  0
2076:  CALL   129A
....................                strcpy(Menus.Letra,"Modo"); 
207A:  MOVLW  04
207C:  MOVWF  FEA
207E:  MOVLW  1C
2080:  MOVWF  FE9
2082:  MOVFF  FF2,451
2086:  BCF    FF2.7
2088:  MOVLW  00
208A:  CALL   0744
208E:  TBLRD*-
2090:  TBLRD*+
2092:  MOVF   FF5,W
2094:  MOVWF  FEE
2096:  IORLW  00
2098:  BNZ   2090
209A:  MOVLB  4
209C:  BTFSC  x51.7
209E:  BSF    FF2.7
....................                SSD1306_DrawText(20,0,Menus.Letra,3); 
20A0:  MOVLW  14
20A2:  MOVWF  x51
20A4:  CLRF   x52
20A6:  MOVLW  04
20A8:  MOVWF  x54
20AA:  MOVLW  1C
20AC:  MOVWF  x53
20AE:  MOVLW  03
20B0:  MOVWF  x55
20B2:  MOVLB  0
20B4:  CALL   1054
....................                strcpy(Menus.Letra,"Push"); 
20B8:  MOVLW  04
20BA:  MOVWF  FEA
20BC:  MOVLW  1C
20BE:  MOVWF  FE9
20C0:  MOVFF  FF2,451
20C4:  BCF    FF2.7
20C6:  MOVLW  00
20C8:  CALL   0764
20CC:  TBLRD*-
20CE:  TBLRD*+
20D0:  MOVF   FF5,W
20D2:  MOVWF  FEE
20D4:  IORLW  00
20D6:  BNZ   20CE
20D8:  MOVLB  4
20DA:  BTFSC  x51.7
20DC:  BSF    FF2.7
....................                SSD1306_DrawText(30,30,Menus.Letra,3); 
20DE:  MOVLW  1E
20E0:  MOVWF  x51
20E2:  MOVWF  x52
20E4:  MOVLW  04
20E6:  MOVWF  x54
20E8:  MOVLW  1C
20EA:  MOVWF  x53
20EC:  MOVLW  03
20EE:  MOVWF  x55
20F0:  MOVLB  0
20F2:  CALL   1054
....................                SSD1306_Display(); 
20F6:  CALL   109E
....................                delay_ms(800); 
20FA:  MOVLW  04
20FC:  MOVLB  4
20FE:  MOVWF  x51
2100:  MOVLW  C8
2102:  MOVWF  x52
2104:  MOVLB  0
2106:  CALL   08F0
210A:  MOVLB  4
210C:  DECFSZ x51,F
210E:  BRA    2100
....................                SSD1306_ClearDisplay();  
2110:  MOVLB  0
2112:  CALL   119E
....................                SSD1306_Display(); 
2116:  CALL   109E
211A:  MOVLB  4
....................             } 
....................             if(tleft>=20){ 
211C:  MOVF   x45,F
211E:  BNZ   2126
2120:  MOVF   x44,W
2122:  SUBLW  13
2124:  BC    214E
....................                LuzUV_on; 
2126:  BCF    F8B.2
2128:  BCF    F94.2
....................                if(flaguv==0){ 
212A:  BTFSC  1B.5
212C:  BRA    214C
....................                   delay_ms(100); 
212E:  MOVLW  64
2130:  MOVWF  x52
2132:  MOVLB  0
2134:  CALL   08F0
....................                   SSD1306_Begin(SSD1306_SWITCHCAPVCC, SSD1306_I2C_ADDRESS); 
2138:  MOVLW  02
213A:  MOVLB  4
213C:  MOVWF  x51
213E:  MOVLW  78
2140:  MOVWF  x52
2142:  MOVLB  0
2144:  CALL   09AA
....................                   flaguv=1; 
2148:  BSF    1B.5
214A:  MOVLB  4
....................                } 
....................             }else{ 
214C:  BRA    2174
....................                LuzUV_off; 
214E:  BSF    F8B.2
2150:  BCF    F94.2
....................                if(flaguv==1){ 
2152:  BTFSS  1B.5
2154:  BRA    2174
....................                   delay_ms(100); 
2156:  MOVLW  64
2158:  MOVWF  x52
215A:  MOVLB  0
215C:  CALL   08F0
....................                   SSD1306_Begin(SSD1306_SWITCHCAPVCC, SSD1306_I2C_ADDRESS); 
2160:  MOVLW  02
2162:  MOVLB  4
2164:  MOVWF  x51
2166:  MOVLW  78
2168:  MOVWF  x52
216A:  MOVLB  0
216C:  CALL   09AA
....................                   flaguv=0; 
2170:  BCF    1B.5
2172:  MOVLB  4
....................                } 
....................             } 
....................          }else if(modo==1){//modo Hold-on 
2174:  BRA    246C
2176:  DECFSZ x33,W
2178:  BRA    226E
....................             if(!flagModo){ 
217A:  BTFSC  1B.2
217C:  BRA    2238
....................                flagModo=ON; 
217E:  BSF    1B.2
....................                SSD1306_ClearDisplay();  
2180:  MOVLB  0
2182:  CALL   119E
....................                SSD1306_Display(); 
2186:  CALL   109E
....................                SSD1306_InvertDisplay(1); 
218A:  MOVLW  01
218C:  MOVLB  4
218E:  MOVWF  x51
2190:  MOVLB  0
2192:  CALL   129A
....................                strcpy(Menus.Letra,"Modo"); 
2196:  MOVLW  04
2198:  MOVWF  FEA
219A:  MOVLW  1C
219C:  MOVWF  FE9
219E:  MOVFF  FF2,451
21A2:  BCF    FF2.7
21A4:  MOVLW  00
21A6:  CALL   0744
21AA:  TBLRD*-
21AC:  TBLRD*+
21AE:  MOVF   FF5,W
21B0:  MOVWF  FEE
21B2:  IORLW  00
21B4:  BNZ   21AC
21B6:  MOVLB  4
21B8:  BTFSC  x51.7
21BA:  BSF    FF2.7
....................                SSD1306_DrawText(20,0,Menus.Letra,3); 
21BC:  MOVLW  14
21BE:  MOVWF  x51
21C0:  CLRF   x52
21C2:  MOVLW  04
21C4:  MOVWF  x54
21C6:  MOVLW  1C
21C8:  MOVWF  x53
21CA:  MOVLW  03
21CC:  MOVWF  x55
21CE:  MOVLB  0
21D0:  CALL   1054
....................                strcpy(Menus.Letra,"Hold"); 
21D4:  MOVLW  04
21D6:  MOVWF  FEA
21D8:  MOVLW  1C
21DA:  MOVWF  FE9
21DC:  MOVFF  FF2,451
21E0:  BCF    FF2.7
21E2:  MOVLW  00
21E4:  CALL   0784
21E8:  TBLRD*-
21EA:  TBLRD*+
21EC:  MOVF   FF5,W
21EE:  MOVWF  FEE
21F0:  IORLW  00
21F2:  BNZ   21EA
21F4:  MOVLB  4
21F6:  BTFSC  x51.7
21F8:  BSF    FF2.7
....................                SSD1306_DrawText(30,30,Menus.Letra,3); 
21FA:  MOVLW  1E
21FC:  MOVWF  x51
21FE:  MOVWF  x52
2200:  MOVLW  04
2202:  MOVWF  x54
2204:  MOVLW  1C
2206:  MOVWF  x53
2208:  MOVLW  03
220A:  MOVWF  x55
220C:  MOVLB  0
220E:  CALL   1054
....................                SSD1306_Display(); 
2212:  CALL   109E
....................                delay_ms(800); 
2216:  MOVLW  04
2218:  MOVLB  4
221A:  MOVWF  x51
221C:  MOVLW  C8
221E:  MOVWF  x52
2220:  MOVLB  0
2222:  CALL   08F0
2226:  MOVLB  4
2228:  DECFSZ x51,F
222A:  BRA    221C
....................                SSD1306_ClearDisplay();  
222C:  MOVLB  0
222E:  CALL   119E
....................                SSD1306_Display(); 
2232:  CALL   109E
2236:  MOVLB  4
....................             } 
....................             if(tleft>=20){ 
2238:  MOVF   x45,F
223A:  BNZ   2242
223C:  MOVF   x44,W
223E:  SUBLW  13
2240:  BC    226A
....................                if(!estado){ 
2242:  BTFSC  1B.1
2244:  BRA    2268
....................                   output_toggle(PIN_C2); 
2246:  BCF    F94.2
2248:  BTG    F8B.2
....................                   delay_ms(100); 
224A:  MOVLW  64
224C:  MOVWF  x52
224E:  MOVLB  0
2250:  CALL   08F0
....................                   SSD1306_Begin(SSD1306_SWITCHCAPVCC, SSD1306_I2C_ADDRESS); 
2254:  MOVLW  02
2256:  MOVLB  4
2258:  MOVWF  x51
225A:  MOVLW  78
225C:  MOVWF  x52
225E:  MOVLB  0
2260:  CALL   09AA
....................                   estado=ON; 
2264:  BSF    1B.1
2266:  MOVLB  4
....................                } 
....................             }else{ 
2268:  BRA    226C
....................                estado=OFF; 
226A:  BCF    1B.1
....................             } 
....................          }else if(modo==2){//modo Temporizador 
226C:  BRA    246C
226E:  MOVF   x33,W
2270:  SUBLW  02
2272:  BTFSS  FD8.2
2274:  BRA    246C
....................             if(!flagModo){ 
2276:  BTFSC  1B.2
2278:  BRA    2334
....................                flagModo=ON; 
227A:  BSF    1B.2
....................                SSD1306_ClearDisplay();  
227C:  MOVLB  0
227E:  CALL   119E
....................                SSD1306_Display(); 
2282:  CALL   109E
....................                SSD1306_InvertDisplay(1); 
2286:  MOVLW  01
2288:  MOVLB  4
228A:  MOVWF  x51
228C:  MOVLB  0
228E:  CALL   129A
....................                strcpy(Menus.Letra,"Modo"); 
2292:  MOVLW  04
2294:  MOVWF  FEA
2296:  MOVLW  1C
2298:  MOVWF  FE9
229A:  MOVFF  FF2,451
229E:  BCF    FF2.7
22A0:  MOVLW  00
22A2:  CALL   0744
22A6:  TBLRD*-
22A8:  TBLRD*+
22AA:  MOVF   FF5,W
22AC:  MOVWF  FEE
22AE:  IORLW  00
22B0:  BNZ   22A8
22B2:  MOVLB  4
22B4:  BTFSC  x51.7
22B6:  BSF    FF2.7
....................                SSD1306_DrawText(20,0,Menus.Letra,3); 
22B8:  MOVLW  14
22BA:  MOVWF  x51
22BC:  CLRF   x52
22BE:  MOVLW  04
22C0:  MOVWF  x54
22C2:  MOVLW  1C
22C4:  MOVWF  x53
22C6:  MOVLW  03
22C8:  MOVWF  x55
22CA:  MOVLB  0
22CC:  CALL   1054
....................                strcpy(Menus.Letra,"Timer"); 
22D0:  MOVLW  04
22D2:  MOVWF  FEA
22D4:  MOVLW  1C
22D6:  MOVWF  FE9
22D8:  MOVFF  FF2,451
22DC:  BCF    FF2.7
22DE:  MOVLW  00
22E0:  CALL   07A4
22E4:  TBLRD*-
22E6:  TBLRD*+
22E8:  MOVF   FF5,W
22EA:  MOVWF  FEE
22EC:  IORLW  00
22EE:  BNZ   22E6
22F0:  MOVLB  4
22F2:  BTFSC  x51.7
22F4:  BSF    FF2.7
....................                SSD1306_DrawText(30,30,Menus.Letra,3); 
22F6:  MOVLW  1E
22F8:  MOVWF  x51
22FA:  MOVWF  x52
22FC:  MOVLW  04
22FE:  MOVWF  x54
2300:  MOVLW  1C
2302:  MOVWF  x53
2304:  MOVLW  03
2306:  MOVWF  x55
2308:  MOVLB  0
230A:  CALL   1054
....................                SSD1306_Display(); 
230E:  CALL   109E
....................                delay_ms(800); 
2312:  MOVLW  04
2314:  MOVLB  4
2316:  MOVWF  x51
2318:  MOVLW  C8
231A:  MOVWF  x52
231C:  MOVLB  0
231E:  CALL   08F0
2322:  MOVLB  4
2324:  DECFSZ x51,F
2326:  BRA    2318
....................                SSD1306_ClearDisplay();  
2328:  MOVLB  0
232A:  CALL   119E
....................                SSD1306_Display(); 
232E:  CALL   109E
2332:  MOVLB  4
....................             } 
....................              
....................             sprintf(voltage, "%02i:", minutos); 
2334:  MOVLW  04
2336:  MOVWF  x50
2338:  MOVLW  46
233A:  MOVWF  x4F
233C:  MOVFF  435,451
2340:  MOVLW  01
2342:  MOVWF  x52
2344:  MOVLB  0
2346:  CALL   1306
234A:  MOVLW  3A
234C:  MOVLB  4
234E:  MOVWF  x57
2350:  MOVLB  0
2352:  CALL   12E6
....................             SSD1306_DrawText(92,55,voltage,1); 
2356:  MOVLW  5C
2358:  MOVLB  4
235A:  MOVWF  x51
235C:  MOVLW  37
235E:  MOVWF  x52
2360:  MOVLW  04
2362:  MOVWF  x54
2364:  MOVLW  46
2366:  MOVWF  x53
2368:  MOVLW  01
236A:  MOVWF  x55
236C:  MOVLB  0
236E:  CALL   1054
....................             sprintf(voltage, "%02i", segundos); 
2372:  MOVLW  04
2374:  MOVLB  4
2376:  MOVWF  x50
2378:  MOVLW  46
237A:  MOVWF  x4F
237C:  MOVFF  436,451
2380:  MOVLW  01
2382:  MOVWF  x52
2384:  MOVLB  0
2386:  CALL   1306
....................             SSD1306_DrawText(110,55,voltage,1); 
238A:  MOVLW  6E
238C:  MOVLB  4
238E:  MOVWF  x51
2390:  MOVLW  37
2392:  MOVWF  x52
2394:  MOVLW  04
2396:  MOVWF  x54
2398:  MOVLW  46
239A:  MOVWF  x53
239C:  MOVLW  01
239E:  MOVWF  x55
23A0:  MOVLB  0
23A2:  CALL   1054
....................              
....................             if(input_state(PIN_C2)){ 
23A6:  BTFSS  F82.2
23A8:  BRA    23F2
....................                if(tup>=400){ 
23AA:  MOVLB  4
23AC:  MOVF   x3F,W
23AE:  SUBLW  00
23B0:  BC    23F0
23B2:  XORLW  FF
23B4:  BNZ   23BC
23B6:  MOVF   x3E,W
23B8:  SUBLW  8F
23BA:  BC    23F0
....................                   menu=1; 
23BC:  MOVLW  01
23BE:  MOVWF  x32
....................                   SSD1306_ClearDisplay();  
23C0:  MOVLB  0
23C2:  CALL   119E
....................                   SSD1306_Display(); 
23C6:  CALL   109E
....................                   SSD1306_InvertDisplay(1); 
23CA:  MOVLW  01
23CC:  MOVLB  4
23CE:  MOVWF  x51
23D0:  MOVLB  0
23D2:  CALL   129A
....................                   SSD1306_Display(); 
23D6:  CALL   109E
....................                   delay_ms(800); 
23DA:  MOVLW  04
23DC:  MOVLB  4
23DE:  MOVWF  x51
23E0:  MOVLW  C8
23E2:  MOVWF  x52
23E4:  MOVLB  0
23E6:  CALL   08F0
23EA:  MOVLB  4
23EC:  DECFSZ x51,F
23EE:  BRA    23E0
23F0:  MOVLB  0
....................                } 
....................             } 
....................              
....................             if(tiempoCumplido) 
23F2:  BTFSS  1B.3
23F4:  BRA    23FA
....................                LuzUV_off; 
23F6:  BSF    F8B.2
23F8:  BCF    F94.2
....................                 
....................             if(tleft>=20 && !tiempoCumplido){ 
23FA:  MOVLB  4
23FC:  MOVF   x45,F
23FE:  BNZ   2406
2400:  MOVF   x44,W
2402:  SUBLW  13
2404:  BC    2432
2406:  BTFSC  1B.3
2408:  BRA    2432
....................                if(!estado){ 
240A:  BTFSC  1B.1
240C:  BRA    2430
....................                   output_toggle(PIN_C2); 
240E:  BCF    F94.2
2410:  BTG    F8B.2
....................                   delay_ms(100); 
2412:  MOVLW  64
2414:  MOVWF  x52
2416:  MOVLB  0
2418:  CALL   08F0
....................                   SSD1306_Begin(SSD1306_SWITCHCAPVCC, SSD1306_I2C_ADDRESS); 
241C:  MOVLW  02
241E:  MOVLB  4
2420:  MOVWF  x51
2422:  MOVLW  78
2424:  MOVWF  x52
2426:  MOVLB  0
2428:  CALL   09AA
....................                   estado=ON; 
242C:  BSF    1B.1
242E:  MOVLB  4
....................                } 
....................             }else if(tleft>=20 && tiempoCumplido){ 
2430:  BRA    246C
2432:  MOVF   x45,F
2434:  BNZ   243C
2436:  MOVF   x44,W
2438:  SUBLW  13
243A:  BC    246A
243C:  BTFSS  1B.3
243E:  BRA    246A
....................                if(!estado){ 
2440:  BTFSC  1B.1
2442:  BRA    2468
....................                   tiempoCumplido=OFF; 
2444:  BCF    1B.3
....................                   LuzUV_on; 
2446:  BCF    F8B.2
2448:  BCF    F94.2
....................                   delay_ms(100); 
244A:  MOVLW  64
244C:  MOVWF  x52
244E:  MOVLB  0
2450:  CALL   08F0
....................                   SSD1306_Begin(SSD1306_SWITCHCAPVCC, SSD1306_I2C_ADDRESS); 
2454:  MOVLW  02
2456:  MOVLB  4
2458:  MOVWF  x51
245A:  MOVLW  78
245C:  MOVWF  x52
245E:  MOVLB  0
2460:  CALL   09AA
....................                   estado=ON; 
2464:  BSF    1B.1
2466:  MOVLB  4
....................                } 
....................             }else{ 
2468:  BRA    246C
....................                estado=OFF;  
246A:  BCF    1B.1
....................             } 
....................          } 
....................       }else if(menu==1){ 
246C:  BRA    2736
246E:  DECFSZ x32,W
2470:  BRA    2736
....................          if(UP && DOWN){ 
2472:  BSF    F92.0
2474:  BTFSC  F80.0
2476:  BRA    25C4
2478:  BSF    F92.1
247A:  BTFSC  F80.1
247C:  BRA    25C4
....................             delay_ms(50); 
247E:  MOVLW  32
2480:  MOVWF  x52
2482:  MOVLB  0
2484:  CALL   08F0
....................             if(UP && DOWN){    
2488:  BSF    F92.0
248A:  BTFSC  F80.0
248C:  BRA    25C0
248E:  BSF    F92.1
2490:  BTFSC  F80.1
2492:  BRA    25C0
....................                menu=0; 
2494:  MOVLB  4
2496:  CLRF   x32
....................                write_eeprom(0,segundosp);delay_ms(10); 
2498:  CLRF   FA9
249A:  MOVFF  438,FA8
249E:  BCF    FA6.6
24A0:  BCF    FA6.7
24A2:  BSF    FA6.2
24A4:  MOVF   FF2,W
24A6:  MOVWF  00
24A8:  BCF    FF2.7
24AA:  MOVLB  F
24AC:  MOVLW  55
24AE:  MOVWF  FA7
24B0:  MOVLW  AA
24B2:  MOVWF  FA7
24B4:  BSF    FA6.1
24B6:  BTFSC  FA6.1
24B8:  BRA    24B6
24BA:  BCF    FA6.2
24BC:  MOVF   00,W
24BE:  IORWF  FF2,F
24C0:  MOVLW  0A
24C2:  MOVLB  4
24C4:  MOVWF  x52
24C6:  MOVLB  0
24C8:  CALL   08F0
....................                write_eeprom(1,minutosp);delay_ms(10); 
24CC:  MOVLW  01
24CE:  MOVWF  FA9
24D0:  MOVFF  437,FA8
24D4:  BCF    FA6.6
24D6:  BCF    FA6.7
24D8:  BSF    FA6.2
24DA:  MOVF   FF2,W
24DC:  MOVWF  00
24DE:  BCF    FF2.7
24E0:  MOVLB  F
24E2:  MOVLW  55
24E4:  MOVWF  FA7
24E6:  MOVLW  AA
24E8:  MOVWF  FA7
24EA:  BSF    FA6.1
24EC:  BTFSC  FA6.1
24EE:  BRA    24EC
24F0:  BCF    FA6.2
24F2:  MOVF   00,W
24F4:  IORWF  FF2,F
24F6:  MOVLW  0A
24F8:  MOVLB  4
24FA:  MOVWF  x52
24FC:  MOVLB  0
24FE:  CALL   08F0
....................                segundos=segundosp; 
2502:  MOVFF  438,436
....................                minutos=minutosp; 
2506:  MOVFF  437,435
....................                SSD1306_ClearDisplay();  
250A:  CALL   119E
....................                SSD1306_Display(); 
250E:  CALL   109E
....................                SSD1306_InvertDisplay(1); 
2512:  MOVLW  01
2514:  MOVLB  4
2516:  MOVWF  x51
2518:  MOVLB  0
251A:  CALL   129A
....................                strcpy(Menus.Letra,"Valor"); 
251E:  MOVLW  04
2520:  MOVWF  FEA
2522:  MOVLW  1C
2524:  MOVWF  FE9
2526:  MOVFF  FF2,451
252A:  BCF    FF2.7
252C:  MOVLW  00
252E:  CALL   07C4
2532:  TBLRD*-
2534:  TBLRD*+
2536:  MOVF   FF5,W
2538:  MOVWF  FEE
253A:  IORLW  00
253C:  BNZ   2534
253E:  MOVLB  4
2540:  BTFSC  x51.7
2542:  BSF    FF2.7
....................                SSD1306_DrawText(20,0,Menus.Letra,2); 
2544:  MOVLW  14
2546:  MOVWF  x51
2548:  CLRF   x52
254A:  MOVLW  04
254C:  MOVWF  x54
254E:  MOVLW  1C
2550:  MOVWF  x53
2552:  MOVLW  02
2554:  MOVWF  x55
2556:  MOVLB  0
2558:  CALL   1054
....................                strcpy(Menus.Letra,"Almacenado"); 
255C:  MOVLW  04
255E:  MOVWF  FEA
2560:  MOVLW  1C
2562:  MOVWF  FE9
2564:  MOVFF  FF2,451
2568:  BCF    FF2.7
256A:  MOVLW  00
256C:  CALL   07E4
2570:  TBLRD*-
2572:  TBLRD*+
2574:  MOVF   FF5,W
2576:  MOVWF  FEE
2578:  IORLW  00
257A:  BNZ   2572
257C:  MOVLB  4
257E:  BTFSC  x51.7
2580:  BSF    FF2.7
....................                SSD1306_DrawText(2,30,Menus.Letra,2); 
2582:  MOVLW  02
2584:  MOVWF  x51
2586:  MOVLW  1E
2588:  MOVWF  x52
258A:  MOVLW  04
258C:  MOVWF  x54
258E:  MOVLW  1C
2590:  MOVWF  x53
2592:  MOVLW  02
2594:  MOVWF  x55
2596:  MOVLB  0
2598:  CALL   1054
....................                SSD1306_Display(); 
259C:  CALL   109E
....................                delay_ms(800); 
25A0:  MOVLW  04
25A2:  MOVLB  4
25A4:  MOVWF  x51
25A6:  MOVLW  C8
25A8:  MOVWF  x52
25AA:  MOVLB  0
25AC:  CALL   08F0
25B0:  MOVLB  4
25B2:  DECFSZ x51,F
25B4:  BRA    25A6
....................                SSD1306_ClearDisplay();  
25B6:  MOVLB  0
25B8:  CALL   119E
....................                SSD1306_Display(); 
25BC:  CALL   109E
....................             } 
....................          }else{    
25C0:  BRA    2738
25C2:  MOVLB  4
....................           
....................             if(tleft>=20){ 
25C4:  MOVF   x45,F
25C6:  BNZ   25CE
25C8:  MOVF   x44,W
25CA:  SUBLW  13
25CC:  BC    25E4
....................                if(!estado){ 
25CE:  BTFSC  1B.1
25D0:  BRA    25E2
....................                   seleccion=!seleccion; 
25D2:  BTG    1B.4
....................                   SSD1306_ClearDisplay();  
25D4:  MOVLB  0
25D6:  CALL   119E
....................                   SSD1306_Display(); 
25DA:  CALL   109E
....................                   estado=ON; 
25DE:  BSF    1B.1
25E0:  MOVLB  4
....................                } 
....................             }else{ 
25E2:  BRA    25E6
....................                estado=OFF; 
25E4:  BCF    1B.1
....................             } 
....................              
....................             strcpy(Menus.Letra,"TIMER UV"); 
25E6:  MOVLW  04
25E8:  MOVWF  FEA
25EA:  MOVLW  1C
25EC:  MOVWF  FE9
25EE:  MOVFF  FF2,451
25F2:  BCF    FF2.7
25F4:  MOVLW  00
25F6:  MOVLB  0
25F8:  CALL   080A
25FC:  TBLRD*-
25FE:  TBLRD*+
2600:  MOVF   FF5,W
2602:  MOVWF  FEE
2604:  IORLW  00
2606:  BNZ   25FE
2608:  MOVLB  4
260A:  BTFSC  x51.7
260C:  BSF    FF2.7
....................             SSD1306_DrawText(20,0,Menus.Letra,2); 
260E:  MOVLW  14
2610:  MOVWF  x51
2612:  CLRF   x52
2614:  MOVLW  04
2616:  MOVWF  x54
2618:  MOVLW  1C
261A:  MOVWF  x53
261C:  MOVLW  02
261E:  MOVWF  x55
2620:  MOVLB  0
2622:  CALL   1054
....................             sprintf(voltage, "%02i:", minutosp); 
2626:  MOVLW  04
2628:  MOVLB  4
262A:  MOVWF  x50
262C:  MOVLW  46
262E:  MOVWF  x4F
2630:  MOVFF  437,451
2634:  MOVLW  01
2636:  MOVWF  x52
2638:  MOVLB  0
263A:  CALL   1306
263E:  MOVLW  3A
2640:  MOVLB  4
2642:  MOVWF  x57
2644:  MOVLB  0
2646:  CALL   12E6
....................             SSD1306_DrawText(22,25,voltage,2); 
264A:  MOVLW  16
264C:  MOVLB  4
264E:  MOVWF  x51
2650:  MOVLW  19
2652:  MOVWF  x52
2654:  MOVLW  04
2656:  MOVWF  x54
2658:  MOVLW  46
265A:  MOVWF  x53
265C:  MOVLW  02
265E:  MOVWF  x55
2660:  MOVLB  0
2662:  CALL   1054
....................             sprintf(voltage, "%02i", segundosp); 
2666:  MOVLW  04
2668:  MOVLB  4
266A:  MOVWF  x50
266C:  MOVLW  46
266E:  MOVWF  x4F
2670:  MOVFF  438,451
2674:  MOVLW  01
2676:  MOVWF  x52
2678:  MOVLB  0
267A:  CALL   1306
....................             SSD1306_DrawText(60,25,voltage,2); 
267E:  MOVLW  3C
2680:  MOVLB  4
2682:  MOVWF  x51
2684:  MOVLW  19
2686:  MOVWF  x52
2688:  MOVLW  04
268A:  MOVWF  x54
268C:  MOVLW  46
268E:  MOVWF  x53
2690:  MOVLW  02
2692:  MOVWF  x55
2694:  MOVLB  0
2696:  CALL   1054
....................              
....................             if(seleccion){ 
269A:  BTFSS  1B.4
269C:  BRA    26E6
....................                SSD1306_DrawRect(55,20,32,25); 
269E:  MOVLW  37
26A0:  MOVLB  4
26A2:  MOVWF  x51
26A4:  MOVLW  14
26A6:  MOVWF  x52
26A8:  MOVLW  20
26AA:  MOVWF  x53
26AC:  MOVLW  19
26AE:  MOVWF  x54
26B0:  MOVLB  0
26B2:  CALL   140E
....................                if(tup>=60 && segundosp<59){ 
26B6:  MOVLB  4
26B8:  MOVF   x3F,F
26BA:  BNZ   26C2
26BC:  MOVF   x3E,W
26BE:  SUBLW  3B
26C0:  BC    26CE
26C2:  MOVF   x38,W
26C4:  SUBLW  3A
26C6:  BNC   26CE
....................                   segundosp++; 
26C8:  INCF   x38,F
....................                   tdown=0; 
26CA:  CLRF   x41
26CC:  CLRF   x40
....................                } 
....................                 
....................                if(tdown>=60 && segundosp>0){ 
26CE:  MOVF   x41,F
26D0:  BNZ   26D8
26D2:  MOVF   x40,W
26D4:  SUBLW  3B
26D6:  BC    26E2
26D8:  MOVF   x38,F
26DA:  BZ    26E2
....................                   segundosp--; 
26DC:  DECF   x38,F
....................                   tdown=0; 
26DE:  CLRF   x41
26E0:  CLRF   x40
....................                } 
....................             }else{ 
26E2:  BRA    272C
26E4:  MOVLB  0
....................                SSD1306_DrawRect(17,20,32,25); 
26E6:  MOVLW  11
26E8:  MOVLB  4
26EA:  MOVWF  x51
26EC:  MOVLW  14
26EE:  MOVWF  x52
26F0:  MOVLW  20
26F2:  MOVWF  x53
26F4:  MOVLW  19
26F6:  MOVWF  x54
26F8:  MOVLB  0
26FA:  CALL   140E
....................                if(tup>=60 && minutosp<90){ 
26FE:  MOVLB  4
2700:  MOVF   x3F,F
2702:  BNZ   270A
2704:  MOVF   x3E,W
2706:  SUBLW  3B
2708:  BC    2716
270A:  MOVF   x37,W
270C:  SUBLW  59
270E:  BNC   2716
....................                   minutosp++; 
2710:  INCF   x37,F
....................                   tdown=0; 
2712:  CLRF   x41
2714:  CLRF   x40
....................                } 
....................                 
....................                if(tdown>=60 && minutosp>1){ 
2716:  MOVF   x41,F
2718:  BNZ   2720
271A:  MOVF   x40,W
271C:  SUBLW  3B
271E:  BC    272C
2720:  MOVF   x37,W
2722:  SUBLW  01
2724:  BC    272C
....................                   minutosp--; 
2726:  DECF   x37,F
....................                   tdown=0; 
2728:  CLRF   x41
272A:  CLRF   x40
....................                } 
....................             } 
....................                    
....................             if(minutosp>90) 
272C:  MOVF   x37,W
272E:  SUBLW  5A
2730:  BC    2736
....................                minutosp=1; 
2732:  MOVLW  01
2734:  MOVWF  x37
2736:  MOVLB  0
....................          } 
....................       } 
....................    } 
2738:  BRA    1F74
.................... } 
273A:  SLEEP 

Configuration Fuses:
   Word  1: 0E1C   NOIESO NOFCMEN HSPLL PLL5 CPUDIV4 NOUSBDIV
   Word  2: 1E19   NOBROWNOUT NOWDT BORV20 NOPUT WDT32768 NOVREGEN
   Word  3: 0100   NOPBADEN CCP2C1 NOMCLR NOLPT1OSC
   Word  4: 0080   NOSTVREN NODEBUG NOLVP NOXINST
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
